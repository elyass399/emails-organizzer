Directory structure:
└── emails-organizzer/
    ├── README.md
    ├── app.vue
    ├── components.json
    ├── nuxt.config.ts
    ├── package.json
    ├── tailwind.config.ts
    ├── test-imap-connection.js
    ├── tsconfig.json
    ├── assets/
    │   └── css/
    │       └── main.css
    ├── components/
    │   └── ui/
    │       ├── avatar/
    │       │   ├── Avatar.vue
    │       │   ├── AvatarFallback.vue
    │       │   ├── AvatarImage.vue
    │       │   └── index.ts
    │       ├── badge/
    │       │   ├── Badge.vue
    │       │   └── index.ts
    │       ├── button/
    │       │   ├── button.vue
    │       │   └── index.ts
    │       ├── card/
    │       │   ├── Card.vue
    │       │   ├── CardContent.vue
    │       │   ├── CardDescription.vue
    │       │   ├── CardFooter.vue
    │       │   ├── CardHeader.vue
    │       │   ├── CardTitle.vue
    │       │   └── index.ts
    │       ├── dialog/
    │       │   ├── Dialog.vue
    │       │   ├── DialogClose.vue
    │       │   ├── DialogContent.vue
    │       │   ├── DialogDescription.vue
    │       │   ├── DialogFooter.vue
    │       │   ├── DialogHeader.vue
    │       │   ├── DialogScrollContent.vue
    │       │   ├── DialogTitle.vue
    │       │   ├── DialogTrigger.vue
    │       │   └── index.ts
    │       ├── dropdown-menu/
    │       │   ├── DropdownMenu.vue
    │       │   ├── DropdownMenuCheckboxItem.vue
    │       │   ├── DropdownMenuContent.vue
    │       │   ├── DropdownMenuGroup.vue
    │       │   ├── DropdownMenuItem.vue
    │       │   ├── DropdownMenuLabel.vue
    │       │   ├── DropdownMenuRadioGroup.vue
    │       │   ├── DropdownMenuRadioItem.vue
    │       │   ├── DropdownMenuSeparator.vue
    │       │   ├── DropdownMenuShortcut.vue
    │       │   ├── DropdownMenuSub.vue
    │       │   ├── DropdownMenuSubContent.vue
    │       │   ├── DropdownMenuSubTrigger.vue
    │       │   ├── DropdownMenuTrigger.vue
    │       │   └── index.ts
    │       ├── input/
    │       │   ├── index.ts
    │       │   └── Input.vue
    │       ├── label/
    │       │   ├── index.ts
    │       │   └── Label.vue
    │       ├── table/
    │       │   ├── index.ts
    │       │   ├── Table.vue
    │       │   ├── TableBody.vue
    │       │   ├── TableCaption.vue
    │       │   ├── TableCell.vue
    │       │   ├── TableEmpty.vue
    │       │   ├── TableFooter.vue
    │       │   ├── TableHead.vue
    │       │   ├── TableHeader.vue
    │       │   └── TableRow.vue
    │       ├── textarea/
    │       │   ├── index.ts
    │       │   └── Textarea.vue
    │       └── toast/
    │           ├── index.ts
    │           ├── Toast.vue
    │           ├── ToastAction.vue
    │           ├── ToastClose.vue
    │           ├── ToastDescription.vue
    │           ├── Toaster.vue
    │           ├── ToastProvider.vue
    │           ├── ToastTitle.vue
    │           ├── ToastViewport.vue
    │           └── use-toast.ts
    ├── lib/
    │   └── utils.ts
    ├── pages/
    │   ├── confirm.vue
    │   ├── forgot-password.vue
    │   ├── index.vue
    │   ├── login.vue
    │   ├── profile.vue
    │   └── update-password.vue
    ├── plugins/
    │   └── particles.client.ts
    ├── public/
    │   └── robots.txt
    └── server/
        ├── tsconfig.json
        ├── api/
        │   ├── clients.get.js
        │   ├── inbox.get.js
        │   ├── staff.get.js
        │   ├── staff.post.js
        │   ├── users.get.js
        │   ├── emails/
        │   │   ├── process.post.js
        │   │   ├── reply.post.js
        │   │   └── webhook.post.js
        │   └── staff/
        │       ├── [id].put.js
        │       └── admin-create.post.js
        ├── plugins/
        │   └── scheduler.js
        └── utils/
            ├── aiService.js
            ├── clientManager.js
            ├── emailSender.js
            ├── imapClient.js
            ├── mailProcessor.js
            ├── skillExtractor.js
            └── supabaseAdmin.js

================================================
FILE: README.md
================================================
# Nuxt Minimal Starter

Look at the [Nuxt documentation](https://nuxt.com/docs/getting-started/introduction) to learn more.

## Setup

Make sure to install dependencies:

```bash
# npm
npm install

# pnpm
pnpm install

# yarn
yarn install

# bun
bun install
```

## Development Server

Start the development server on `http://localhost:3000`:

```bash
# npm
npm run dev

# pnpm
pnpm dev

# yarn
yarn dev

# bun
bun run dev
```

## Production

Build the application for production:

```bash
# npm
npm run build

# pnpm
pnpm build

# yarn
yarn build

# bun
bun run build
```

Locally preview production build:

```bash
# npm
npm run preview

# pnpm
pnpm preview

# yarn
yarn preview

# bun
bun run preview
```

Check out the [deployment documentation](https://nuxt.com/docs/getting-started/deployment) for more information.



================================================
FILE: app.vue
================================================
<template>
  <div>
    <NuxtRouteAnnouncer />
    
    <!-- Applichiamo una transizione a livello globale -->
    <NuxtPage :transition="{
      name: 'page',
      mode: 'out-in'
    }" />
  </div>
</template>

<style>
/* Stili di base del corpo (li avevi giÃ , li ho solo puliti) */
body {
  background-color: hsl(210 40% 98%);
  color: hsl(222.2 84% 4.9%);
}

/* Definiamo le animazioni per la transizione di pagina */
.page-enter-active,
.page-leave-active {
  transition: opacity 0.2s ease;
}
.page-enter-from,
.page-leave-to {
  opacity: 0;
}
</style>


================================================
FILE: components.json
================================================
{
  "$schema": "https://shadcn-vue.com/schema.json",
  "style": "new-york",
  "typescript": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "assets/css/main.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "composables": "@/composables",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib"
  },
  "iconLibrary": "lucide"
}


================================================
FILE: nuxt.config.ts
================================================
// File: nuxt.config.ts

export default defineNuxtConfig({
  devtools: { enabled: true },
  
  modules: [
    '@nuxtjs/tailwindcss',
    '@nuxtjs/supabase',
    'shadcn-nuxt'
  ],

  supabase: {
    url: process.env.SUPABASE_URL,
    key: process.env.NUXT_PUBLIC_SUPABASE_KEY,
    
    redirect: true,
    
    redirectOptions: {
      login: '/login',
      callback: '/confirm',
      // MODIFICA CHIAVE QUI: Dobbiamo escludere ENTRAMBE le pagine del flusso.
      exclude: ['/forgot-password', '/update-password'], 
    }
  },

  shadcn: {
    prefix: '',
    componentDir: './components/ui'
  },

  runtimeConfig: {
    googleApiKey: process.env.GOOGLE_API_KEY,
    supabaseServiceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
    sendgridApiKey: process.env.SENDGRID_API_KEY, 
    senderEmail: process.env.SENDER_EMAIL,
    imapHost: process.env.IMAP_HOST,
    imapPort: parseInt(process.env.IMAP_PORT || '993'),
    imapUsername: process.env.IMAP_USERNAME,
    imapPassword: process.env.IMAP_PASSWORD,
    imapMailbox: process.env.IMAP_MAILBOX || 'INBOX',
    
    public: {
      baseUrl: process.env.NUXT_PUBLIC_BASE_URL || 'http://localhost:3000',
      supabaseUrl: process.env.SUPABASE_URL,
      supabaseAnonKey: process.env.NUXT_PUBLIC_SUPABASE_KEY,
    }
  },
})


================================================
FILE: package.json
================================================
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "NODE_OPTIONS=--max-old-space-size=4096 NODE_TLS_REJECT_UNAUTHORIZED=0 nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare"
  },
  "dependencies": {
    "@sendgrid/mail": "^8.1.5",
    "@tsparticles/engine": "^3.8.1",
    "@tsparticles/vue3": "^3.0.1",
    "@vueuse/core": "^13.5.0",
    "autoprefixer": "^10.4.21",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^17.2.0",
    "lucide-vue-next": "^0.525.0",
    "mailparser": "^3.7.4",
    "node-cron": "^4.2.0",
    "node-imap": "^0.9.6",
    "nuxt": "^3.17.6",
    "radix-vue": "^1.9.17",
    "reka-ui": "^2.4.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.11",
    "tsparticles": "^3.8.1",
    "tw-animate-css": "^1.3.5",
    "vue": "^3.5.17",
    "vue-router": "^4.5.1"
  },
  "devDependencies": {
    "@nuxtjs/supabase": "^1.5.3",
    "@nuxtjs/tailwindcss": "^7.0.0-beta.0",
    "@tailwindcss/nesting": "^0.0.0-insiders.565cd3e",
    "postcss": "^8.5.6",
    "shadcn-nuxt": "^2.2.0"
  }
}



================================================
FILE: tailwind.config.ts
================================================
// tailwind.config.ts
import type { Config } from 'tailwindcss'
import animate from 'tailwindcss-animate'

export default {
  darkMode: ['class'],
  safelist: ['dark'],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        // --- MODIFICHE QUI ---
        // Forziamo background e foreground per i componenti Shadcn che usano --background
        background: 'hsl(var(--background))', // Questa Ã¨ la definizione standard
        foreground: 'hsl(var(--foreground))', // Questa Ã¨ la definizione standard


        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        xl: 'calc(var(--radius) + 4px)',
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
        'collapsible-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-collapsible-content-height)' },
        },
        'collapsible-up': {
          from: { height: 'var(--radix-collapsible-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'collapsible-down': 'collapsible-down 0.2s ease-in-out',
        'collapsible-up': 'collapsible-up 0.2s ease-in-out',
      },
    },
  },
  plugins: [animate],
} satisfies Config


================================================
FILE: test-imap-connection.js
================================================
// test-imap-connection.js - Moduli ES Syntax

import 'dotenv/config'; // Importa dotenv in modo che carichi le variabili

import Imap from 'node-imap';
import { simpleParser } from 'mailparser';

const config = {
  imapHost: process.env.IMAP_HOST,
  imapPort: parseInt(process.env.IMAP_PORT || '993'),
  imapUsername: process.env.IMAP_USERNAME,
  imapPassword: process.env.IMAP_PASSWORD,
  imapMailbox: process.env.IMAP_MAILBOX || 'INBOX',
};

console.log('--- IMAP Test Connection ---');
console.log('IMAP_HOST:', config.imapHost);
console.log('IMAP_PORT:', config.imapPort);
console.log('IMAP_USERNAME:', config.imapUsername);
// Non loggare la password per sicurezza

// Attiva il debug verboso di node-imap (puÃƒÂ² essere molto dettagliato)
// Imap.debug = console.log; // Mantienilo commentato per un output piÃƒÂ¹ pulito, riattivalo solo se necessario

console.log('IMAP Test Client Config being used:', {
  user: config.imapUsername,
  host: config.imapHost,
  port: config.imapPort,
  tls: true,
  tlsOptsRejectUnauthorized: false // Esplicito per il log
});

const imap = new Imap({
  user: config.imapUsername,
  password: config.imapPassword,
  host: config.imapHost,
  port: config.imapPort,
  tls: true,
  // *** ATTENZIONE CRITICA PER LA SICUREZZA IN PRODUZIONE ***
  // Questa opzione disabilita la verifica che il nome host del server IMAP
  // corrisponda al nome nel suo certificato SSL.
  // ÃƒË† NECESSARIO se il tuo provider (es. Shellrent) usa un certificato generico
  // (es. *.shared.hosting.com).
  // Espone a vulnerabilitÃƒÂ  Man-in-the-Middle (MITM) in produzione.
  // PER AMBIENTI DI PRODUZIONE, ASSICURATI DI AVERE UN CERTIFICATO SSL VALIDO
  // E Rimuovi O Imposta a `true`: `tlsOpts: { rejectUnauthorized: true }`
  tlsOpts: { rejectUnauthorized: false }
});

imap.once('ready', () => {
  console.log('IMAP: Connected successfully!');
  imap.openBox(config.imapMailbox, false, (err, box) => {
    if (err) {
      console.error('IMAP: Error opening mailbox:', err);
      imap.end();
      return;
    }
    console.log(`IMAP: Mailbox "${config.imapMailbox}" opened.`);

    imap.search(['UNSEEN'], (err, uids) => {
      if (err) {
        console.error('IMAP: Error searching for emails:', err);
        imap.end();
        return;
      }

      if (!uids || uids.length === 0) {
        console.log('IMAP: No new unseen emails.');
        imap.end();
        return;
      }

      console.log(`IMAP: Found ${uids.length} unseen emails. Fetching them.`);

      const f = imap.fetch(uids, { bodies: '' }); // Fetch the entire email body
      f.on('message', (msg, seqno) => {
        console.log(`IMAP: Processing message #${seqno} (UID: ${uids[seqno - 1]})`);
        let buffer = '';
        msg.on('body', (stream) => {
          stream.on('data', (chunk) => {
            buffer += chunk.toString('utf8');
          });
          stream.once('end', async () => {
            try {
              const parsed = await simpleParser(buffer);
              console.log(`  From: ${parsed.from?.text}`);
              console.log(`  Subject: ${parsed.subject}`);
              console.log(`  Date: ${parsed.date}`);
              // Puoi aggiungere parsed.text o parsed.html per vedere il corpo
            } catch (parseErr) {
              console.error('  Error parsing email:', parseErr);
            }
          });
        });
      });

      f.once('error', (fetchErr) => {
        console.error('IMAP: Fetch error:', fetchErr);
        imap.end();
      });

      f.once('end', () => {
        console.log('IMAP: Finished fetching messages.');
        imap.addFlags(uids, ['\\Seen'], (flagErr) => {
          if (flagErr) console.error('IMAP: Error marking emails as seen:', flagErr);
          console.log('IMAP: Emails marked as seen.');
          imap.end();
        });
      });
    });
  });
});

imap.once('error', (err) => {
  console.error('IMAP: Global error event:', err);
  imap.end();
});

imap.once('end', () => {
  console.log('IMAP: Connection gracefully closed.');
});

imap.connect();


================================================
FILE: tsconfig.json
================================================
{
  // https://nuxt.com/docs/guide/concepts/typescript
  "extends": "./.nuxt/tsconfig.json"
}



================================================
FILE: assets/css/main.css
================================================
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

/* assets/css/main.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

.dialog-content-force-white {
  background-color: white !important;
  color: black !important;
}

.dark .dialog-content-force-white {
  background-color: white !important;
  color: black !important;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.129 0.042 264.695);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.129 0.042 264.695);
  --primary: oklch(0.208 0.042 265.755);
  --primary-foreground: oklch(0.984 0.003 247.858);
  --secondary: oklch(0.968 0.007 247.896);
  --secondary-foreground: oklch(0.208 0.042 265.755);
  --muted: oklch(0.968 0.007 247.896);
  --muted-foreground: oklch(0.554 0.046 257.417);
  --accent: oklch(0.968 0.007 247.896);
  --accent-foreground: oklch(0.208 0.042 265.755);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.929 0.013 255.508);
  --input: oklch(0.929 0.013 255.508);
  --ring: oklch(0.704 0.04 256.788);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.984 0.003 247.858);
  --sidebar-foreground: oklch(0.129 0.042 264.695);
  --sidebar-primary: oklch(0.208 0.042 265.755);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.968 0.007 247.896);
  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
  --sidebar-border: oklch(0.929 0.013 255.508);
  --sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
  --card: oklch(0.129 0.042 264.695);
  --card-foreground: oklch(0.984 0.003 247.858);
  --popover: oklch(0.129 0.042 264.695);
  --popover-foreground: oklch(0.984 0.003 247.858);
  --primary: oklch(0.984 0.003 247.858);
  --primary-foreground: oklch(0.208 0.042 265.755);
  --secondary: oklch(0.279 0.041 260.031);
  --secondary-foreground: oklch(0.984 0.003 247.858);
  --muted: oklch(0.279 0.041 260.031);
  --muted-foreground: oklch(0.704 0.04 256.788);
  --accent: oklch(0.279 0.041 260.031);
  --accent-foreground: oklch(0.984 0.003 247.858);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.279 0.041 260.031);
  --input: oklch(0.279 0.041 260.031);
  --ring: oklch(0.446 0.043 257.281);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.208 0.042 265.755);
  --sidebar-foreground: oklch(0.984 0.003 247.858);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.279 0.041 260.031);
  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
  --sidebar-border: oklch(0.279 0.041 260.031);
  --sidebar-ring: oklch(0.446 0.043 257.281);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================
FILE: components/ui/avatar/Avatar.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { AvatarRoot } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <AvatarRoot
    data-slot="avatar"
    :class="cn('relative flex size-8 shrink-0 overflow-hidden rounded-full', props.class)"
  >
    <slot />
  </AvatarRoot>
</template>



================================================
FILE: components/ui/avatar/AvatarFallback.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { AvatarFallback, type AvatarFallbackProps } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps<AvatarFallbackProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = reactiveOmit(props, 'class')
</script>

<template>
  <AvatarFallback
    data-slot="avatar-fallback"
    v-bind="delegatedProps"
    :class="cn('bg-muted flex size-full items-center justify-center rounded-full', props.class)"
  >
    <slot />
  </AvatarFallback>
</template>



================================================
FILE: components/ui/avatar/AvatarImage.vue
================================================
<script setup lang="ts">
import type { AvatarImageProps } from 'reka-ui'
import { AvatarImage } from 'reka-ui'

const props = defineProps<AvatarImageProps>()
</script>

<template>
  <AvatarImage
    data-slot="avatar-image"
    v-bind="props"
    class="aspect-square size-full"
  >
    <slot />
  </AvatarImage>
</template>



================================================
FILE: components/ui/avatar/index.ts
================================================
export { default as Avatar } from './Avatar.vue'
export { default as AvatarFallback } from './AvatarFallback.vue'
export { default as AvatarImage } from './AvatarImage.vue'



================================================
FILE: components/ui/badge/Badge.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { type BadgeVariants, badgeVariants } from '.'
import { cn } from '@/lib/utils'
interface Props { variant?: BadgeVariants['variant']; class?: HTMLAttributes['class'] }
const props = defineProps<Props>()
</script>
<template><div :class="cn(badgeVariants({ variant }), props.class)"><slot /></div></template>


================================================
FILE: components/ui/badge/index.ts
================================================
import { type VariantProps, cva } from 'class-variance-authority'
export { default as Badge } from './Badge.vue'
export const badgeVariants = cva('inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2', {
    variants: { 
        variant: { 
            default: 'border-transparent bg-primary text-primary-foreground hover:bg-primary/80', 
            secondary: 'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80', 
            destructive: 'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80', 
            outline: 'text-foreground border-input',
            // RIMOSSE LE VARIANTI PERSONALIZZATE PER I BADGE DEGLI UFFICI
        } 
    },
    defaultVariants: { variant: 'default' },
})
export type BadgeVariants = VariantProps<typeof badgeVariants>


================================================
FILE: components/ui/button/button.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { Primitive, type PrimitiveProps } from 'radix-vue'
import { type ButtonVariants, buttonVariants } from '.'
import { cn } from '@/lib/utils'

// MODIFICA QUI: Rimuovi 'extends PrimitiveProps' e definisci esplicitamente 'as' e 'asChild'
interface Props {
  variant?: ButtonVariants['variant'];
  size?: ButtonVariants['size'];
  class?: HTMLAttributes['class'];
  as?: PrimitiveProps['as']; // Usa il tipo da PrimitiveProps per 'as'
  asChild?: PrimitiveProps['asChild']; // Usa il tipo da PrimitiveProps per 'asChild'
}

const props = withDefaults(defineProps<Props>(), { 
  as: 'button', // Default tag HTML
  asChild: false // Default a non renderizzare come child
})
</script>
<template>
  <Primitive :as="props.as" :as-child="props.asChild" :class="cn(buttonVariants({ variant, size }), props.class)"><slot /></Primitive>
</template>


================================================
FILE: components/ui/button/index.ts
================================================
import { type VariantProps, cva } from 'class-variance-authority'
export { default as Button } from './button.vue'
export const buttonVariants = cva('inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50', {
    variants: {
        variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
        // NUOVA VARIANTE: Sfondo nero, testo bianco
        black: 'bg-black text-white hover:bg-black/90',
        },
        size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
        },
    },
    defaultVariants: { variant: 'default', size: 'default' },
})
export type ButtonVariants = VariantProps<typeof buttonVariants>


================================================
FILE: components/ui/card/Card.vue
================================================
<template><div :class="cn('rounded-lg border bg-card text-card-foreground shadow-sm', props.class)"><slot /></div></template>
<script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; 
const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/card/CardContent.vue
================================================
<template><div :class="cn('p-6 pt-0', props.class)"><slot /></div></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/card/CardDescription.vue
================================================
<template><p :class="cn('text-sm text-muted-foreground', props.class)"><slot /></p></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/card/CardFooter.vue
================================================
<template><div :class="cn('flex items-center p-6 pt-0', props.class)"><slot /></div></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/card/CardHeader.vue
================================================
<template><div :class="cn('flex flex-col space-y-1.5 p-6', props.class)"><slot /></div></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/card/CardTitle.vue
================================================
<template><h3 :class="cn('text-2xl font-semibold leading-none tracking-tight', props.class)"><slot /></h3></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/card/index.ts
================================================
export { default as Card } from './Card.vue'
export { default as CardHeader } from './CardHeader.vue'
export { default as CardTitle } from './CardTitle.vue'
export { default as CardDescription } from './CardDescription.vue'
export { default as CardContent } from './CardContent.vue'
export { default as CardFooter } from './CardFooter.vue'


================================================
FILE: components/ui/dialog/Dialog.vue
================================================
<script setup lang="ts">
import { DialogRoot, type DialogRootEmits, type DialogRootProps, useForwardPropsEmits } from 'radix-vue'
const props = defineProps</* @vue-ignore */ DialogRootProps>() // Aggiungi qui
const emits = defineEmits<DialogRootEmits>()
const forwarded = useForwardPropsEmits(props, emits)
</script>
<template><DialogRoot v-bind="forwarded"><slot /></DialogRoot></template>


================================================
FILE: components/ui/dialog/DialogClose.vue
================================================
<script setup lang="ts">
import { DialogClose, type DialogCloseProps } from 'radix-vue' // <-- CAMBIATO DA reka-ui a radix-vue

const props = defineProps</* @vue-ignore */ DialogCloseProps>()
</script>

<template>
  <DialogClose v-bind="props">
    <slot />
  </DialogClose>
</template>


================================================
FILE: components/ui/dialog/DialogContent.vue
================================================
<script setup lang="ts">
import { type HTMLAttributes, computed } from 'vue'
import { DialogClose, DialogContent, type DialogContentEmits, type DialogContentProps, DialogOverlay, DialogPortal, useForwardPropsEmits } from 'radix-vue'
import { X } from 'lucide-vue-next'
import { cn } from '@/lib/utils'
const props = defineProps</* @vue-ignore */ DialogContentProps & { class?: HTMLAttributes['class'] }>()
const emits = defineEmits<DialogContentEmits>()
const delegatedProps = computed(() => { const { class: _, ...delegated } = props; return delegated })
const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>
<template>
  <DialogPortal>
    <DialogOverlay class="fixed inset-0 z-50 bg-black/80" />
    <!-- CLASSE AGGIORNATA QUI: 'max-w-lg' DEVE ESSERE STATO RIMOSSO -->
    <DialogContent v-bind="forwarded" :class="cn('fixed left-1/2 top-1/2 z-50 grid w-full -translate-x-1/2 -translate-y-1/2 gap-4 border bg-white !important p-6 shadow-lg duration-200 sm:rounded-lg dark:bg-white !important dark:text-black !important', props.class)">
      <slot />
      <DialogClose class="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none">
        <X class="h-4 w-4" />
        <span class="sr-only">Close</span>
      </DialogClose>
    </DialogContent>
  </DialogPortal>
</template>


================================================
FILE: components/ui/dialog/DialogDescription.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { DialogDescription, type DialogDescriptionProps } from 'radix-vue'
import { cn } from '@/lib/utils'
const props = defineProps</* @vue-ignore */ DialogDescriptionProps & { class?: HTMLAttributes['class'] }>() // Aggiungi qui
</script>
<template><DialogDescription :class="cn('text-sm text-muted-foreground', props.class)" v-bind="props"><slot /></DialogDescription></template>


================================================
FILE: components/ui/dialog/DialogFooter.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
const props = defineProps<{ class?: HTMLAttributes['class'] }>()
</script>
<template><div :class="cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', props.class)"><slot /></div></template>


================================================
FILE: components/ui/dialog/DialogHeader.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
const props = defineProps<{ class?: HTMLAttributes['class'] }>()
</script>
<template><div :class="cn('flex flex-col space-y-1.5 text-center sm:text-left', props.class)"><slot /></div></template>


================================================
FILE: components/ui/dialog/DialogScrollContent.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { X } from 'lucide-vue-next'
import {
  DialogClose,
  DialogContent, // Questo ora viene da radix-vue!
  type DialogContentEmits,
  type DialogContentProps,
  DialogOverlay, // Questo ora viene da radix-vue!
  DialogPortal, // Questo ora viene da radix-vue!
  useForwardPropsEmits,
} from 'radix-vue' // <-- CAMBIATO DA reka-ui a radix-vue
import { cn } from '@/lib/utils'

const props = defineProps</* @vue-ignore */ DialogContentProps & { class?: HTMLAttributes['class'] }>()
const emits = defineEmits<DialogContentEmits>()
const delegatedProps = reactiveOmit(props, 'class')
const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DialogPortal>
    <DialogOverlay
      class="fixed inset-0 z-50 grid place-items-center overflow-y-auto bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
    >
      <DialogContent
        :class="
          cn(
            'relative z-50 grid w-full max-w-lg my-8 gap-4 border border-border bg-background p-6 shadow-lg duration-200 sm:rounded-lg md:w-full',
            props.class,
          )
        "
        v-bind="forwarded"
        @pointer-down-outside="(event) => {
          const originalEvent = event.detail.originalEvent;
          const target = originalEvent.target as HTMLElement;
          if (originalEvent.offsetX > target.clientWidth || originalEvent.offsetY > target.clientHeight) {
            event.preventDefault();
          }
        }"
      >
        <slot />

        <DialogClose
          class="absolute top-4 right-4 p-0.5 transition-colors rounded-md hover:bg-secondary"
        >
          <X class="w-4 h-4" />
          <span class="sr-only">Close</span>
        </DialogClose>
      </DialogContent>
    </DialogOverlay>
  </DialogPortal>
</template>


================================================
FILE: components/ui/dialog/DialogTitle.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { DialogTitle, type DialogTitleProps } from 'radix-vue'
import { cn } from '@/lib/utils'
const props = defineProps</* @vue-ignore */ DialogTitleProps & { class?: HTMLAttributes['class'] }>() // Aggiungi qui
</script>
<template><DialogTitle v-bind="props" :class="cn('text-lg font-semibold leading-none tracking-tight', props.class)"><slot /></DialogTitle></template>


================================================
FILE: components/ui/dialog/DialogTrigger.vue
================================================
<script setup lang="ts">
import { DialogTrigger, type DialogTriggerProps } from 'radix-vue'
const props = defineProps</* @vue-ignore */ DialogTriggerProps>() // Aggiungi qui
</script>
<template><DialogTrigger v-bind="props"><slot /></DialogTrigger></template>


================================================
FILE: components/ui/dialog/index.ts
================================================
// File: components/ui/dialog/index.ts
export { default as Dialog } from './Dialog.vue'
export { default as DialogClose } from './DialogClose.vue'
export { default as DialogContent } from './DialogContent.vue'
export { default as DialogDescription } from './DialogDescription.vue'
export { default as DialogFooter } from './DialogFooter.vue'
export { default as DialogHeader } from './DialogHeader.vue'
export { default as DialogScrollContent } from './DialogScrollContent.vue'
export { default as DialogTitle } from './DialogTitle.vue'
export { default as DialogTrigger } from './DialogTrigger.vue'


================================================
FILE: components/ui/dropdown-menu/DropdownMenu.vue
================================================
<script setup lang="ts">
import { DropdownMenuRoot, type DropdownMenuRootEmits, type DropdownMenuRootProps, useForwardPropsEmits } from 'reka-ui'

const props = defineProps<DropdownMenuRootProps>()
const emits = defineEmits<DropdownMenuRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <DropdownMenuRoot
    data-slot="dropdown-menu"
    v-bind="forwarded"
  >
    <slot />
  </DropdownMenuRoot>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuCheckboxItem.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { Check } from 'lucide-vue-next'
import {
  DropdownMenuCheckboxItem,
  type DropdownMenuCheckboxItemEmits,
  type DropdownMenuCheckboxItemProps,
  DropdownMenuItemIndicator,
  useForwardPropsEmits,
} from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps<DropdownMenuCheckboxItemProps & { class?: HTMLAttributes['class'] }>()
const emits = defineEmits<DropdownMenuCheckboxItemEmits>()

const delegatedProps = reactiveOmit(props, 'class')

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DropdownMenuCheckboxItem
    data-slot="dropdown-menu-checkbox-item"
    v-bind="forwarded"
    :class=" cn(
      `focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4`,
      props.class,
    )"
  >
    <span class="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
      <DropdownMenuItemIndicator>
        <Check class="size-4" />
      </DropdownMenuItemIndicator>
    </span>
    <slot />
  </DropdownMenuCheckboxItem>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuContent.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import {
  DropdownMenuContent,
  type DropdownMenuContentEmits,
  type DropdownMenuContentProps,
  DropdownMenuPortal,
  useForwardPropsEmits,
} from 'reka-ui'
import { cn } from '@/lib/utils'

const props = withDefaults(
  defineProps<DropdownMenuContentProps & { class?: HTMLAttributes['class'] }>(),
  {
    sideOffset: 4,
  },
)
const emits = defineEmits<DropdownMenuContentEmits>()

const delegatedProps = reactiveOmit(props, 'class')

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DropdownMenuPortal>
    <DropdownMenuContent
      data-slot="dropdown-menu-content"
      v-bind="forwarded"
      :class="cn('bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--reka-dropdown-menu-content-available-height) min-w-[8rem] origin-(--reka-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md', props.class)"
    >
      <slot />
    </DropdownMenuContent>
  </DropdownMenuPortal>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuGroup.vue
================================================
<script setup lang="ts">
import { DropdownMenuGroup, type DropdownMenuGroupProps } from 'reka-ui'

const props = defineProps<DropdownMenuGroupProps>()
</script>

<template>
  <DropdownMenuGroup
    data-slot="dropdown-menu-group"
    v-bind="props"
  >
    <slot />
  </DropdownMenuGroup>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuItem.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { DropdownMenuItem, type DropdownMenuItemProps, useForwardProps } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = withDefaults(defineProps<DropdownMenuItemProps & {
  class?: HTMLAttributes['class']
  inset?: boolean
  variant?: 'default' | 'destructive'
}>(), {
  variant: 'default',
})

const delegatedProps = reactiveOmit(props, 'inset', 'variant', 'class')

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <DropdownMenuItem
    data-slot="dropdown-menu-item"
    :data-inset="inset ? '' : undefined"
    :data-variant="variant"
    v-bind="forwardedProps"
    :class="cn(`focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4`, props.class)"
  >
    <slot />
  </DropdownMenuItem>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuLabel.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { DropdownMenuLabel, type DropdownMenuLabelProps, useForwardProps } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps<DropdownMenuLabelProps & { class?: HTMLAttributes['class'], inset?: boolean }>()

const delegatedProps = reactiveOmit(props, 'class', 'inset')
const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <DropdownMenuLabel
    data-slot="dropdown-menu-label"
    :data-inset="inset ? '' : undefined"
    v-bind="forwardedProps"
    :class="cn('px-2 py-1.5 text-sm font-medium data-[inset]:pl-8', props.class)"
  >
    <slot />
  </DropdownMenuLabel>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuRadioGroup.vue
================================================
<script setup lang="ts">
import {
  DropdownMenuRadioGroup,
  type DropdownMenuRadioGroupEmits,
  type DropdownMenuRadioGroupProps,
  useForwardPropsEmits,
} from 'reka-ui'

const props = defineProps<DropdownMenuRadioGroupProps>()
const emits = defineEmits<DropdownMenuRadioGroupEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <DropdownMenuRadioGroup
    data-slot="dropdown-menu-radio-group"
    v-bind="forwarded"
  >
    <slot />
  </DropdownMenuRadioGroup>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuRadioItem.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { Circle } from 'lucide-vue-next'
import {
  DropdownMenuItemIndicator,
  DropdownMenuRadioItem,
  type DropdownMenuRadioItemEmits,
  type DropdownMenuRadioItemProps,
  useForwardPropsEmits,
} from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps<DropdownMenuRadioItemProps & { class?: HTMLAttributes['class'] }>()

const emits = defineEmits<DropdownMenuRadioItemEmits>()

const delegatedProps = reactiveOmit(props, 'class')

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DropdownMenuRadioItem
    data-slot="dropdown-menu-radio-item"
    v-bind="forwarded"
    :class="cn(
      `focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4`,
      props.class,
    )"
  >
    <span class="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
      <DropdownMenuItemIndicator>
        <Circle class="size-2 fill-current" />
      </DropdownMenuItemIndicator>
    </span>
    <slot />
  </DropdownMenuRadioItem>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuSeparator.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import {
  DropdownMenuSeparator,
  type DropdownMenuSeparatorProps,
} from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps<DropdownMenuSeparatorProps & {
  class?: HTMLAttributes['class']
}>()

const delegatedProps = reactiveOmit(props, 'class')
</script>

<template>
  <DropdownMenuSeparator
    data-slot="dropdown-menu-separator"
    v-bind="delegatedProps"
    :class="cn('bg-border -mx-1 my-1 h-px', props.class)"
  />
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuShortcut.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <span
    data-slot="dropdown-menu-shortcut"
    :class="cn('text-muted-foreground ml-auto text-xs tracking-widest', props.class)"
  >
    <slot />
  </span>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuSub.vue
================================================
<script setup lang="ts">
import {
  DropdownMenuSub,
  type DropdownMenuSubEmits,
  type DropdownMenuSubProps,
  useForwardPropsEmits,
} from 'reka-ui'

const props = defineProps<DropdownMenuSubProps>()
const emits = defineEmits<DropdownMenuSubEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <DropdownMenuSub data-slot="dropdown-menu-sub" v-bind="forwarded">
    <slot />
  </DropdownMenuSub>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuSubContent.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import {
  DropdownMenuSubContent,
  type DropdownMenuSubContentEmits,
  type DropdownMenuSubContentProps,
  useForwardPropsEmits,
} from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps<DropdownMenuSubContentProps & { class?: HTMLAttributes['class'] }>()
const emits = defineEmits<DropdownMenuSubContentEmits>()

const delegatedProps = reactiveOmit(props, 'class')

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DropdownMenuSubContent
    data-slot="dropdown-menu-sub-content"
    v-bind="forwarded"
    :class="cn('bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--reka-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg', props.class)"
  >
    <slot />
  </DropdownMenuSubContent>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuSubTrigger.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { ChevronRight } from 'lucide-vue-next'
import {
  DropdownMenuSubTrigger,
  type DropdownMenuSubTriggerProps,
  useForwardProps,
} from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps<DropdownMenuSubTriggerProps & { class?: HTMLAttributes['class'], inset?: boolean }>()

const delegatedProps = reactiveOmit(props, 'class', 'inset')
const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <DropdownMenuSubTrigger
    data-slot="dropdown-menu-sub-trigger"
    v-bind="forwardedProps"
    :class="cn(
      'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',
      props.class,
    )"
  >
    <slot />
    <ChevronRight class="ml-auto size-4" />
  </DropdownMenuSubTrigger>
</template>



================================================
FILE: components/ui/dropdown-menu/DropdownMenuTrigger.vue
================================================
<script setup lang="ts">
import { DropdownMenuTrigger, type DropdownMenuTriggerProps, useForwardProps } from 'reka-ui'

const props = defineProps<DropdownMenuTriggerProps>()

const forwardedProps = useForwardProps(props)
</script>

<template>
  <DropdownMenuTrigger
    data-slot="dropdown-menu-trigger"
    v-bind="forwardedProps"
  >
    <slot />
  </DropdownMenuTrigger>
</template>



================================================
FILE: components/ui/dropdown-menu/index.ts
================================================
export { default as DropdownMenu } from './DropdownMenu.vue'

export { default as DropdownMenuCheckboxItem } from './DropdownMenuCheckboxItem.vue'
export { default as DropdownMenuContent } from './DropdownMenuContent.vue'
export { default as DropdownMenuGroup } from './DropdownMenuGroup.vue'
export { default as DropdownMenuItem } from './DropdownMenuItem.vue'
export { default as DropdownMenuLabel } from './DropdownMenuLabel.vue'
export { default as DropdownMenuRadioGroup } from './DropdownMenuRadioGroup.vue'
export { default as DropdownMenuRadioItem } from './DropdownMenuRadioItem.vue'
export { default as DropdownMenuSeparator } from './DropdownMenuSeparator.vue'
export { default as DropdownMenuShortcut } from './DropdownMenuShortcut.vue'
export { default as DropdownMenuSub } from './DropdownMenuSub.vue'
export { default as DropdownMenuSubContent } from './DropdownMenuSubContent.vue'
export { default as DropdownMenuSubTrigger } from './DropdownMenuSubTrigger.vue'
export { default as DropdownMenuTrigger } from './DropdownMenuTrigger.vue'
export { DropdownMenuPortal } from 'reka-ui'



================================================
FILE: components/ui/input/index.ts
================================================
export { default as Input } from './Input.vue'



================================================
FILE: components/ui/input/Input.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { useVModel } from '@vueuse/core'
import { cn } from '@/lib/utils'
const props = defineProps<{ defaultValue?: string | number; modelValue?: string | number; class?: HTMLAttributes['class'] }>()
const emits = defineEmits<{ (e: 'update:modelValue', payload: string | number): void }>()
const modelValue = useVModel(props, 'modelValue', emits, { passive: true, defaultValue: props.defaultValue })
</script>
<template><input v-model="modelValue" :class="cn('flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', props.class)"></template>


================================================
FILE: components/ui/label/index.ts
================================================
// File: components/ui/label/index.ts
export { default as Label } from './Label.vue'


================================================
FILE: components/ui/label/Label.vue
================================================
<script setup lang="ts">
import { type HTMLAttributes, type LabelHTMLAttributes } from 'vue'
import { Label, type LabelProps } from 'radix-vue'
import { cn } from '@/lib/utils'
const props = defineProps</* @vue-ignore */ LabelProps & { class?: HTMLAttributes['class'] }>() // Aggiungi qui
</script>
<template><Label :class="cn('text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', props.class)"><slot /></Label></template>


================================================
FILE: components/ui/table/index.ts
================================================
// File: components/ui/table/index.ts

export { default as Table } from './Table.vue'
export { default as TableHeader } from './TableHeader.vue'
export { default as TableBody } from './TableBody.vue' // Assicurati che sia .vue
export { default as TableRow } from './TableRow.vue'
export { default as TableHead } from './TableHead.vue'
export { default as TableCell } from './TableCell.vue'


================================================
FILE: components/ui/table/Table.vue
================================================
<template><div class="relative w-full overflow-auto"><table :class="cn('w-full caption-bottom text-sm', props.class)"><slot /></table></div></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/table/TableBody.vue
================================================
<template><tbody :class="cn('[&_tr:last-child]:border-0', props.class)"><slot /></tbody></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/table/TableCaption.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <caption :class="cn('mt-4 text-sm text-muted-foreground', props.class)">
    <slot />
  </caption>
</template>



================================================
FILE: components/ui/table/TableCell.vue
================================================
<template><td :class="cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', props.class)"><slot /></td></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/table/TableEmpty.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { cn } from '@/lib/utils'
import TableCell from './TableCell.vue'
import TableRow from './TableRow.vue'

const props = withDefaults(defineProps<{
  class?: HTMLAttributes['class']
  colspan?: number
}>(), {
  colspan: 1,
})

const delegatedProps = reactiveOmit(props, 'class')
</script>

<template>
  <TableRow>
    <TableCell
      :class="
        cn(
          'p-4 whitespace-nowrap align-middle text-sm text-foreground',
          props.class,
        )
      "
      v-bind="delegatedProps"
    >
      <div class="flex items-center justify-center py-10">
        <slot />
      </div>
    </TableCell>
  </TableRow>
</template>



================================================
FILE: components/ui/table/TableFooter.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <tfoot :class="cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', props.class)">
    <slot />
  </tfoot>
</template>



================================================
FILE: components/ui/table/TableHead.vue
================================================
<template><th :class="cn('h-8 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0', props.class)"><slot /></th></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/table/TableHeader.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <th :class="cn('h-8 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-0.5', props.class)">
    <slot />
  </th>
</template>


================================================
FILE: components/ui/table/TableRow.vue
================================================
<template><tr :class="cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', props.class)"><slot /></tr></template><script setup lang="ts">import type { HTMLAttributes } from 'vue'; import { cn } from '@/lib/utils'; const props = defineProps<{ class?: HTMLAttributes['class'] }>() </script>


================================================
FILE: components/ui/textarea/index.ts
================================================
// File: components/ui/textarea/index.ts
export { default as Textarea } from './Textarea.vue'


================================================
FILE: components/ui/textarea/Textarea.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { useVModel } from '@vueuse/core'
import { cn } from '@/lib/utils'
const props = defineProps<{ class?: HTMLAttributes['class']; defaultValue?: string | number; modelValue?: string | number }>()
const emits = defineEmits<(e: 'update:modelValue', payload: string | number) => void>()
const modelValue = useVModel(props, 'modelValue', emits, { passive: true, defaultValue: props.defaultValue })
</script>
<template><textarea v-model="modelValue" :class="cn('flex min-h-20 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', props.class)" /></template>


================================================
FILE: components/ui/toast/index.ts
================================================
import type { ToastRootProps } from 'reka-ui'
import type { Component, HTMLAttributes, VNode } from 'vue' // Aggiunto VNode

export { default as Toast } from './Toast.vue'
export { default as ToastAction } from './ToastAction.vue'
export { default as ToastClose } from './ToastClose.vue'
export { default as ToastDescription } from './ToastDescription.vue'
export { default as Toaster } from './Toaster.vue'
export { default as ToastProvider } from './ToastProvider.vue'
export { default as ToastTitle } from './ToastTitle.vue'
export { default as ToastViewport } from './ToastViewport.vue'
export { toast, useToast } from './use-toast'

import { cva, type VariantProps } from 'class-variance-authority'

// MODIFICA QUI: Estendi da ToastRootProps e aggiungi le proprietÃƒÂ  che vengono passate dal `use-toast`
export interface ToastProps extends /* @vue-ignore */ ToastRootProps {
  class?: HTMLAttributes['class']
  variant?: ToastVariants['variant']
  // ProprietÃ  aggiunte per compatibilitÃ  con ToasterToast in use-toast.ts
  title?: string
  description?: string | VNode | (() => VNode) // Deve essere compatibile con StringOrVNode
  action?: Component // Componente per l'azione del toast
}

export const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--reka-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--reka-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
                    'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)

type ToastVariants = VariantProps<typeof toastVariants>

// La definizione ToastProps qui sotto ÃƒÂ¨ duplicata e meno specifica,
// manteniamo quella superiore che ÃƒÂ¨ piÃƒÂ¹ completa.
// export interface ToastProps extends ToastRootProps {
//   class?: HTMLAttributes['class']
//   variant?: ToastVariants['variant']
//   onOpenChange?: ((value: boolean) => void) | undefined
// }


================================================
FILE: components/ui/toast/Toast.vue
================================================
<script setup lang="ts">
import { ToastRoot, type ToastRootEmits, useForwardPropsEmits } from 'reka-ui'
import { cn } from '@/lib/utils'
import { type ToastProps, toastVariants } from '.'
import type { VariantProps } from 'class-variance-authority'

// Definiamo le props in modo esplicito
const props = withDefaults(defineProps<ToastProps & {
  class?: string;
  variant?: VariantProps<typeof toastVariants>['variant'];
  open?: boolean;
}>(), {
  open: true, // Default open a true
});

const emits = defineEmits<ToastRootEmits>()

// Usiamo useForwardPropsEmits per passare le props corrette a ToastRoot
const forwarded = useForwardPropsEmits(props, emits)

</script>

<template>
  <ToastRoot
    v-bind="forwarded"
    :class="cn(toastVariants({ variant: props.variant }), props.class)"
  >
    <slot />
  </ToastRoot>
</template>


================================================
FILE: components/ui/toast/ToastAction.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { ToastAction, type ToastActionProps } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps</* @vue-ignore */ ToastActionProps & { class?: HTMLAttributes['class'] }>() // Aggiungi qui

const delegatedProps = reactiveOmit(props, 'class')
</script>

<template>
  <ToastAction v-bind="delegatedProps" :class="cn('inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive', props.class)">
    <slot />
  </ToastAction>
</template>



================================================
FILE: components/ui/toast/ToastClose.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { X } from 'lucide-vue-next'
import { ToastClose, type ToastCloseProps } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps</* @vue-ignore */ ToastCloseProps & { class?: HTMLAttributes['class'] }>() // Aggiungi qui

const delegatedProps = reactiveOmit(props, 'class')
</script>

<template>
  <ToastClose v-bind="delegatedProps" :class="cn('absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600', props.class)">
    <X class="h-4 w-4" />
  </ToastClose>
</template>



================================================
FILE: components/ui/toast/ToastDescription.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { ToastDescription, type ToastDescriptionProps } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps</* @vue-ignore */ ToastDescriptionProps & { class?: HTMLAttributes['class'] }>() // Aggiungi qui

const delegatedProps = reactiveOmit(props, 'class')
</script>

<template>
  <ToastDescription :class="cn('text-sm opacity-90', props.class)" v-bind="delegatedProps">
    <slot />
  </ToastDescription>
</template>



================================================
FILE: components/ui/toast/Toaster.vue
================================================
<script setup lang="ts">
import { isVNode } from 'vue'
import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from '.'
import { useToast } from './use-toast'

const { toasts } = useToast()
</script>

<template>
  <ToastProvider>
    <Toast
      v-for="toast in toasts"
      :key="toast.id"
      :variant="toast.variant"
      :class="toast.class"
      :open="toast.open"
      @update:open="toast.onOpenChange"
    >
      <div class="grid gap-1">
        <ToastTitle v-if="toast.title">
          {{ toast.title }}
        </ToastTitle>
        <template v-if="toast.description">
          <ToastDescription v-if="isVNode(toast.description)">
            <component :is="toast.description" />
          </ToastDescription>
          <ToastDescription v-else>
            {{ toast.description }}
          </ToastDescription>
        </template>
      </div>
      <component v-if="toast.action" :is="toast.action" />
      <ToastClose />
    </Toast>
    <ToastViewport />
  </ToastProvider>
</template>


================================================
FILE: components/ui/toast/ToastProvider.vue
================================================
<script setup lang="ts">
import { ToastProvider, type ToastProviderProps } from 'reka-ui'

const props = defineProps</* @vue-ignore */ ToastProviderProps>() // Aggiungi qui
</script>

<template>
  <ToastProvider v-bind="props">
    <slot />
  </ToastProvider>
</template>



================================================
FILE: components/ui/toast/ToastTitle.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { ToastTitle, type ToastTitleProps } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps</* @vue-ignore */ ToastTitleProps & { class?: HTMLAttributes['class'] }>() // Aggiungi qui

const delegatedProps = reactiveOmit(props, 'class')
</script>

<template>
  <ToastTitle v-bind="delegatedProps" :class="cn('text-sm font-semibold [&+div]:text-xs', props.class)">
    <slot />
  </ToastTitle>
</template>



================================================
FILE: components/ui/toast/ToastViewport.vue
================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { reactiveOmit } from '@vueuse/core'
import { ToastViewport, type ToastViewportProps } from 'reka-ui'
import { cn } from '@/lib/utils'

const props = defineProps</* @vue-ignore */ ToastViewportProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = reactiveOmit(props, 'class')
</script>

<template>
  <ToastViewport
    v-bind="delegatedProps"
    :class="cn(
      /*
        MODIFICA CHIAVE QUI:
        - Cambiato `top-0` in `bottom-0` per posizionare in basso.
        - Rimosso `flex-col` perchÃ© l'ordine di apparizione dei toast
          (dal basso verso l'alto) Ã¨ gestito automaticamente dalla libreria.
      */
      'fixed bottom-0 right-0 z-[100] flex max-h-screen flex-col-reverse gap-4 p-4', 
      'w-full max-w-[420px] sm:w-auto',
      props.class
    )"
  />
</template>


================================================
FILE: components/ui/toast/use-toast.ts
================================================
import type { Component, VNode } from 'vue'
import { computed, ref } from 'vue'
import type { ToastProps } from '.'

const TOAST_LIMIT = 3
const TOAST_REMOVE_DELAY = 5000 // Default a 5 secondi

export type StringOrVNode =
  | string
  | VNode
  | (() => VNode)

// Assicuriamoci che ogni proprietÃ  sia opzionale ma presente
type ToasterToast = Partial<ToastProps> & {
  id: string
  title?: string
  description?: StringOrVNode
  action?: Component
  duration?: number
}

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
    type: ActionType['ADD_TOAST']
    toast: ToasterToast
  }
  | {
    type: ActionType['UPDATE_TOAST']
    toast: Partial<ToasterToast>
  }
  | {
    type: ActionType['DISMISS_TOAST']
    toastId?: ToasterToast['id']
  }
  | {
    type: ActionType['REMOVE_TOAST']
    toastId?: ToasterToast['id']
  }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

function addToRemoveQueue(toastId: string, duration?: number) {
  if (toastTimeouts.has(toastId))
    return

  const newDuration = duration === Infinity ? Infinity : (duration || TOAST_REMOVE_DELAY)

  if (newDuration === Infinity) return

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: 'REMOVE_TOAST',
      toastId,
    })
  }, newDuration)

  toastTimeouts.set(toastId, timeout)
}

const state = ref<State>({
  toasts: [],
})

function dispatch(action: Action) {
  switch (action.type) {
    case 'ADD_TOAST':
      state.value.toasts = [action.toast, ...state.value.toasts].slice(0, TOAST_LIMIT)
      addToRemoveQueue(action.toast.id, action.toast.duration)
      break

    case 'UPDATE_TOAST':
      state.value.toasts = state.value.toasts.map(t =>
        t.id === action.toast.id ? { ...t, ...action.toast } : t,
      )
      break

    case 'DISMISS_TOAST': {
      const { toastId } = action
      // Imposta 'open' a false per avviare l'animazione di chiusura
      if (toastId) {
        state.value.toasts = state.value.toasts.map(t =>
          t.id === toastId ? { ...t, open: false } : t,
        )
      } else {
        state.value.toasts = state.value.toasts.map(t => ({ ...t, open: false }))
      }
      break
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined)
        state.value.toasts = []

      else
        state.value.toasts = state.value.toasts.filter(t => t.id !== action.toastId)

      break
  }
}

type Toast = Omit<ToasterToast, 'id'>

function toast(props: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    })
    
  const dismiss = () => dispatch({ type: 'REMOVE_TOAST', toastId: id });

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open: boolean) => {
        if (!open) {
            // Rimuovi il toast dall'array dopo un breve ritardo per permettere l'animazione
            setTimeout(() => {
                dismiss()
            }, 500); // 500ms delay
        }
      },
    },
  })

  return {
    id,
    dismiss,
    update,
  }
}

function useToast() {
  return {
    toasts: computed(() => state.value.toasts),
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  }
}


export { useToast, toast }


================================================
FILE: lib/utils.ts
================================================
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================
FILE: pages/confirm.vue
================================================
<script setup lang="ts">
const user = useSupabaseUser()
const router = useRouter()

// Questo watch ora attende che l'utente sia definito e poi reindirizza
// alla pagina a cui l'utente voleva andare. Se non c'Ã¨ una pagina specifica,
// il modulo supabase reindirizzerÃ  alla root ('/') di default.
watch(user, () => {
  if (user.value) {
    // Il modulo supabase gestirÃ  il reindirizzamento all'URL originale (es. /?email_id=123)
    // Noi lo forziamo solo verso la home page come fallback.
    return router.push('/')
  }
}, { immediate: true })
</script>

<template>
  <div class="min-h-screen flex items-center justify-center bg-gray-50">
    <p class="text-gray-600">Autenticazione in corso, attendere prego...</p>
  </div>
</template>


================================================
FILE: pages/forgot-password.vue
================================================
<script setup>
import { ref } from 'vue';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/components/ui/toast/use-toast';
import { Toaster } from '@/components/ui/toast';

definePageMeta({ layout: false });

const supabase = useSupabaseClient();
const { toast } = useToast();
const email = ref('');
const loading = ref(false);
const emailSent = ref(false);

const handleSendResetLink = async () => {
  if (!email.value) {
    toast({ title: 'Errore', description: 'Inserisci la tua email.', variant: 'destructive' });
    return;
  }
  loading.value = true;
  // IMPORTANTE: Il link di reset ora punta alla pagina /update-password
  const { error } = await supabase.auth.resetPasswordForEmail(email.value, {
    redirectTo: 'http://localhost:3000/update-password',
  });
  loading.value = false;

  if (error) {
    toast({ title: 'Errore', description: error.message, variant: 'destructive' });
  } else {
    emailSent.value = true;
  }
};
</script>

<template>
  <div class="relative min-h-screen w-full flex items-center justify-center overflow-hidden bg-gray-900">
    <Toaster />
    <video autoplay loop muted playsinline class="absolute z-0 w-full h-full object-cover opacity-30">
      <source src="/videos/vidRegister.mp4" type="video/mp4">
    </video>
    <div class="relative z-20 flex flex-col items-center justify-center p-4">
      <Card class="w-full max-w-md bg-gray-900/40 backdrop-blur-md border-gray-500/30 text-white">
        <CardHeader class="text-center">
          <CardTitle class="text-2xl text-white">Resetta Password</CardTitle>
          <CardDescription v-if="!emailSent" class="text-gray-400">
            Inserisci la tua email per ricevere un link e impostare la tua password.
          </CardDescription>
          <CardDescription v-else class="text-green-400 p-4 border border-green-500/50 bg-green-500/10 rounded-md">
            <h3 class="font-bold mb-2">Controlla la tua Posta!</h3>
            <p class="text-sm">Ti abbiamo inviato un'email con un link sicuro. Clicca su quel link per continuare.</p>
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form v-if="!emailSent" @submit.prevent="handleSendResetLink" class="space-y-4">
            <div class="space-y-2">
              <Label for="email" class="text-gray-300">Email</Label>
              <Input id="email" type="email" v-model="email" required class="bg-gray-800/50 border-gray-600 text-white"/>
            </div>
            <Button type="submit" class="w-full bg-white text-gray-900 hover:bg-gray-200" :disabled="loading">
              {{ loading ? 'Invio in corso...' : 'Invia Link di Reset' }}
            </Button>
          </form>
          <div class="mt-4 text-center">
            <NuxtLink to="/login" class="text-sm text-gray-400 hover:text-white">← Torna al Login</NuxtLink>
          </div>
        </CardContent>
      </Card>
    </div>
  </div>
</template>


================================================
FILE: pages/index.vue
================================================
<script setup>
import { ref, shallowRef, onMounted, computed, reactive, watch } from 'vue';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/components/ui/toast/use-toast';
import { Toaster } from '@/components/ui/toast';
import { RefreshCw, Users, Edit, List, LogOut, LoaderCircle, Mail, Inbox, UserCheck, Send, User as UserIcon, X as XIcon } from 'lucide-vue-next';

// --- (La logica esistente) ---
const supabase = useSupabaseClient();
const router = useRouter();
const user = useSupabaseUser();
const { toast } = useToast();
const userRole = ref('user');
const staffId = ref(null);
const isLoadingData = ref(true);
const isProfileMenuOpen = ref(false);
const staffProfileData = ref(null);
const processedEmails = shallowRef([]);
const allStaffMembers = shallowRef([]);
const allClients = shallowRef([]);
const totalEmails = computed(() => processedEmails.value.length);
const totalStaff = computed(() => allStaffMembers.value.length);
const totalClients = computed(() => allClients.value.length);

// --- STATO PER I FILTRI ---
const selectedStaffFilter = ref('all');
const dateRangeFilter = reactive({
  start: null,
  end: null,
});

// --- LOGICA DI FILTRAGGIO ---
const displayedEmails = computed(() => {
  let emails = processedEmails.value;
  if (userRole.value !== 'admin') {
    emails = emails.filter(email => email.assigned_to_staff_id === staffId.value);
  }
  if (userRole.value === 'admin' && selectedStaffFilter.value !== 'all') {
    emails = emails.filter(email => email.assigned_to_staff_id === selectedStaffFilter.value);
  }
  if (dateRangeFilter.start) {
    const startDate = new Date(dateRangeFilter.start);
    startDate.setHours(0, 0, 0, 0);
    emails = emails.filter(email => new Date(email.created_at) >= startDate);
  }
  if (dateRangeFilter.end) {
    const endDate = new Date(dateRangeFilter.end);
    endDate.setHours(23, 59, 59, 999);
    emails = emails.filter(email => new Date(email.created_at) <= endDate);
  }
  return emails;
});

// Funzione per resettare i filtri
const clearFilters = () => {
  selectedStaffFilter.value = 'all';
  dateRangeFilter.start = null;
  dateRangeFilter.end = null;
};

const isFilterActive = computed(() => {
    return selectedStaffFilter.value !== 'all' || dateRangeFilter.start || dateRangeFilter.end;
});

const handleLogout = async () => {
  const { error } = await supabase.auth.signOut();
  if (error) console.error('Error logging out:', error);
  router.push('/login');
};

const fetchData = async () => {
  isLoadingData.value = true;
  if (!user.value) { isLoadingData.value = false; return; }
  try {
    const { data: staffDataForUser } = await supabase.from('staff').select('id, role, first_name, last_name').eq('user_id', user.value.id).single();
    if (staffDataForUser) {
      userRole.value = staffDataForUser.role;
      staffId.value = staffDataForUser.id;
      staffProfileData.value = staffDataForUser;
    }
    const [emailsData, allStaffData, clientsData] = await Promise.all([$fetch('/api/inbox'), $fetch('/api/staff'), $fetch('/api/clients')]);
    processedEmails.value = emailsData || [];
    allStaffMembers.value = allStaffData || [];
    allClients.value = clientsData || [];
  } catch (error) {
    toast({ title: 'Errore', description: 'Impossibile caricare i dati.', variant: 'destructive' });
  } finally {
    isLoadingData.value = false;
  }
};
watch(user, (newUser) => { if (newUser) { fetchData(); } }, { immediate: true });

const showAddStaffDialog = ref(false);
const newStaffForm = reactive({ first_name: '', last_name: '', email: '', text_skills: '', role: 'staff' });
const showUpdateStaffDialog = ref(false);
const selectedStaffIdToUpdate = ref(null);
const updateStaffForm = reactive({ text_skills: '' });
const showViewStaffDialog = ref(false);
const showViewClientsDialog = ref(false);
const showConversationModal = ref(false);
const selectedEmail = ref(null);
const conversationHistory = ref([]);
const replyText = ref('');
const isReplying = ref(false);
const showStaffMenuDialog = ref(false);

const addStaff = async () => {
  if (!newStaffForm.email || !newStaffForm.first_name || !newStaffForm.last_name || !newStaffForm.role) {
    return toast({ title: 'Campi mancanti', description: 'Tutti i campi sono obbligatori.', variant: 'destructive' });
  }
  try {
    await $fetch('/api/staff/admin-create', { method: 'POST', body: newStaffForm });
    toast({ title: 'Successo!', description: 'Nuovo utente creato. VerrÃ  inviata un\'email con le istruzioni.' });
    showAddStaffDialog.value = false;
    await fetchData();
  } catch (error) {
    toast({ title: 'Errore', description: error.data?.statusMessage || 'Si Ã¨ verificato un problema.', variant: 'destructive' });
  }
};
const updateStaff = async () => {
  if (!selectedStaffIdToUpdate.value) return;
  try {
    await $fetch(`/api/staff/${selectedStaffIdToUpdate.value}`, { method: 'PUT', body: { text_skills: updateStaffForm.text_skills } });
    toast({ title: 'Successo!', description: 'Competenze aggiornate.' });
    showUpdateStaffDialog.value = false;
    await fetchData();
  } catch (error) {
    toast({ title: 'Errore', description: error.data?.statusMessage || 'Impossibile aggiornare.', variant: 'destructive' });
  }
};
const handleStaffSelectionChange = () => {
  const selected = allStaffMembers.value.find(s => s.id === selectedStaffIdToUpdate.value);
  if (selected) updateStaffForm.text_skills = selected.text_skills;
};
const openAddStaffDialog = () => {
  Object.assign(newStaffForm, { first_name: '', last_name: '', email: '', text_skills: '', role: 'staff' });
  showAddStaffDialog.value = true;
};
const openUpdateStaffDialog = () => {
  if (allStaffMembers.value.length > 0) {
    if (!selectedStaffIdToUpdate.value || !allStaffMembers.value.some(s => s.id === selectedStaffIdToUpdate.value)) {
      selectedStaffIdToUpdate.value = allStaffMembers.value[0].id;
    }
    handleStaffSelectionChange();
  }
  showUpdateStaffDialog.value = true;
};
const openViewStaffDialog = () => { showViewStaffDialog.value = true; };
const openViewClientsDialog = () => { showViewClientsDialog.value = true; };
const openConversation = (email) => {
  selectedEmail.value = email;
  conversationHistory.value = [{ id: email.id, sender: email.sender, body: email.body_text || "Corpo non disponibile", date: email.created_at, isOwn: false }];
  replyText.value = '';
  showConversationModal.value = true;
};
const sendReply = async () => {
  if (!replyText.value.trim() || !selectedEmail.value) return;
  isReplying.value = true;
  try {
    await $fetch('/api/emails/reply', {
      method: 'POST',
      body: { originalEmailId: selectedEmail.value.id, replyText: replyText.value, employeeEmail: selectedEmail.value.staff.email }
    });
    conversationHistory.value.push({ id: Date.now(), sender: 'Tu (Studio)', body: replyText.value, date: new Date().toISOString(), isOwn: true });
    toast({ title: 'Successo!', description: 'Risposta inviata al cliente.' });
    replyText.value = '';
    await fetchData();
  } catch (error) {
    toast({ title: 'Errore', description: 'Impossibile inviare la risposta.', variant: 'destructive' });
  } finally {
    isReplying.value = false;
  }
};
const formatDate = (dateString) => {
  if (!dateString) return 'N/D';
  const options = { day: 'numeric', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit' };
  return new Date(dateString).toLocaleDateString('it-IT', options);
};
const getStatusClass = (status) => {
  switch (status) {
    case 'answered': return 'bg-green-100 text-green-800 border-green-200';
    case 'forwarded': return 'bg-blue-100 text-blue-800 border-blue-200';
    case 'analyzed': return 'bg-purple-100 text-purple-800 border-purple-200';
    case 'manual_review': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    default: return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};
</script>

<template>
  <div class="min-h-screen bg-slate-50">
    <Toaster />
    <header class="bg-purple-600 text-white shadow-md sticky top-0 z-30">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <h1 class="text-2xl font-bold tracking-wider">FlashMail</h1>
                <div class="flex items-center gap-2">
                    <Button @click="fetchData" :disabled="isLoadingData" variant="ghost" class="relative h-10 w-10 rounded-full p-0 flex items-center justify-center hover:bg-purple-700 focus-visible:ring-2 focus-visible:ring-white focus-visible:outline-none transition-colors">
                      <RefreshCw :class="['h-5 w-5', isLoadingData ? 'animate-spin' : '']" />
                    </Button>
                    <DropdownMenu v-model:open="isProfileMenuOpen">
                        <DropdownMenuTrigger class="relative h-10 w-10 rounded-full p-0 flex items-center justify-center hover:bg-purple-700 focus-visible:ring-2 focus-visible:ring-white focus-visible:outline-none transition-colors">
                            <Avatar class="h-9 w-9">
                                <AvatarImage :src="user?.user_metadata?.avatar_url" alt="Avatar" />
                                <AvatarFallback class="bg-purple-400 text-white">{{ staffProfileData?.first_name?.charAt(0) }}{{ staffProfileData?.last_name?.charAt(0) }}</AvatarFallback>
                            </Avatar>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent class="w-56 bg-white" align="end">
                            <DropdownMenuLabel class="font-normal"><div class="flex flex-col space-y-1"><p class="text-sm font-medium leading-none">{{ staffProfileData?.first_name }} {{ staffProfileData?.last_name }}</p><p class="text-xs leading-none text-muted-foreground">{{ user?.email }}</p></div></DropdownMenuLabel>
                            <DropdownMenuSeparator />
                            <NuxtLink to="/profile"><DropdownMenuItem><UserIcon class="mr-2 h-4 w-4" /><span>Profilo</span></DropdownMenuItem></NuxtLink>
                             <DropdownMenuSeparator />
                            <DropdownMenuItem @click="handleLogout" class="text-red-600 focus:bg-red-50 focus:text-red-700"><LogOut class="mr-2 h-4 w-4" /><span>Logout</span></DropdownMenuItem>
                        </DropdownMenuContent>
                    </DropdownMenu>
                </div>
            </div>
        </div>
    </header>

    <main class="container mx-auto p-4 sm:p-6 lg:p-8 space-y-8">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
                <h2 class="text-3xl font-bold tracking-tight text-gray-900">Posta in Arrivo</h2>
                <p class="text-gray-500 mt-1">{{ userRole === 'admin' ? 'Vista Admin: Tutte le email assegnate nel sistema.' : 'Elenco delle email assegnate a te.' }}</p>
            </div>
        </div>
        <div v-if="userRole === 'admin'" class="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
            <Card class="border-purple-200 shadow-sm hover:shadow-lg transition-shadow"><CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle class="text-sm font-medium">Email Assegnate</CardTitle><Mail class="h-4 w-4 text-muted-foreground" /></CardHeader><CardContent><div class="text-2xl font-bold">{{ totalEmails }}</div></CardContent></Card>
            <Card class="border-purple-200 shadow-sm hover:shadow-lg transition-shadow"><CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle class="text-sm font-medium">Staff Attivo</CardTitle><Users class="h-4 w-4 text-muted-foreground" /></CardHeader><CardContent><div class="text-2xl font-bold">{{ totalStaff }}</div></CardContent></Card>
            <Card class="border-purple-200 shadow-sm hover:shadow-lg transition-shadow"><CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle class="text-sm font-medium">Clienti Registrati</CardTitle><UserCheck class="h-4 w-4 text-muted-foreground" /></CardHeader><CardContent><div class="text-2xl font-bold">{{ totalClients }}</div></CardContent></Card>
            <Card class="border-purple-200 shadow-sm hover:shadow-lg transition-shadow">
                <CardHeader class="pb-2"><CardTitle class="text-sm font-medium">Gestione Rapida</CardTitle></CardHeader>
                <CardContent class="flex items-center gap-2 pt-4">
                    <Button @click="showStaffMenuDialog = true" variant="outline" class="w-full border-purple-300 text-purple-600 hover:bg-purple-50 hover:text-purple-700"><Users class="h-4 w-4 mr-2" />Staff</Button>
                    <Button @click="openViewClientsDialog" variant="outline" class="w-full border-purple-300 text-purple-600 hover:bg-purple-50 hover:text-purple-700"><List class="h-4 w-4 mr-2" />Clienti</Button>
                </CardContent>
            </Card>
        </div>

        <Card class="shadow-sm border-purple-200">
            <CardContent class="pt-6">
                <div class="grid grid-cols-1 md:grid-cols-4 items-end gap-4">
                    <div v-if="userRole === 'admin'" class="md:col-span-2">
                        <Label for="staff-filter" class="text-sm font-medium">Filtra per Dipendente</Label>
                        <select id="staff-filter" v-model="selectedStaffFilter" class="mt-1 flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                            <option value="all">Tutti i dipendenti</option>
                            <option v-for="staff in allStaffMembers" :key="staff.id" :value="staff.id">{{ staff.first_name }} {{ staff.last_name }}</option>
                        </select>
                    </div>
                    <div class="w-full"><Label for="date-start" class="text-sm font-medium">Da</Label><Input id="date-start" type="date" v-model="dateRangeFilter.start" class="mt-1" /></div>
                    <div class="w-full"><Label for="date-end" class="text-sm font-medium">A</Label><Input id="date-end" type="date" v-model="dateRangeFilter.end" class="mt-1" /></div>
                </div>
                <div v-if="isFilterActive" class="mt-4 flex justify-end">
                  <Button @click="clearFilters" variant="ghost" size="sm"><XIcon class="h-4 w-4 mr-2" />Reset Filtri</Button>
                </div>
            </CardContent>
        </Card>

        <Card class="shadow-sm">
            <CardHeader><CardTitle>Email Recenti ({{ displayedEmails.length }})</CardTitle></CardHeader>
            <CardContent>
                <div v-if="isLoadingData" class="text-center py-20 flex flex-col items-center"><LoaderCircle class="h-8 w-8 animate-spin text-purple-500 mb-4" /><p class="text-muted-foreground">Caricamento dati...</p></div>
                <div v-else class="border rounded-lg overflow-hidden">
                    <Table class="w-full table-fixed">
                        <colgroup>
                            <col class="w-[35%]" />
                            <col v-if="userRole === 'admin'" class="w-[15%]" />
                            <col class="w-[15%]" />
                            <col class="w-[20%]" />
                            <col class="w-[15%]" />
                        </colgroup>
                        <TableBody>
                            <TableRow v-if="displayedEmails.length === 0"><TableCell :colspan="userRole === 'admin' ? 5 : 4" class="p-12 text-center text-muted-foreground">Nessuna email trovata con i filtri correnti.</TableCell></TableRow>
                            <TableRow v-for="email in displayedEmails" :key="email.id" class="border-t">
                                <TableCell class="p-4 align-top"><div class="font-medium text-gray-900 truncate">{{ email.sender }}</div><div class="text-sm text-gray-500 truncate">{{ email.subject }}</div></TableCell>
                                <TableCell v-if="userRole === 'admin'" class="p-4 text-muted-foreground align-middle">{{ email.staff?.first_name }}</TableCell>
                                <TableCell class="p-4 align-middle"><Badge variant="outline" :class="getStatusClass(email.status)">{{ email.status }}</Badge></TableCell>
                                <TableCell class="p-4 text-right text-sm text-muted-foreground align-middle">{{ formatDate(email.created_at) }}</TableCell>
                                <TableCell class="p-4 text-center align-middle"><Button @click="openConversation(email)" size="sm" variant="outline" class="border-purple-300 text-purple-600 hover:bg-purple-50 hover:text-purple-700">Apri e Rispondi</Button></TableCell>
                            </TableRow>
                        </TableBody>
                    </Table>
                </div>
                <div v-if="!isLoadingData && processedEmails.length === 0" class="text-center py-20 flex flex-col items-center"><Inbox class="h-12 w-12 text-gray-300 mb-4" /><h3 class="font-semibold text-gray-800">Nessuna email da visualizzare</h3><p class="text-gray-500 mt-2 text-sm">La tua casella di posta Ã¨ vuota.</p></div>
            </CardContent>
        </Card>
    </main>
    
    <!-- ===== MODALI CON STILE UNIFORME E TABELLE ALLINEATE ===== -->
    <Dialog :open="showStaffMenuDialog" @update:open="showStaffMenuDialog = $event">
      <DialogContent class="sm:max-w-[425px]"><DialogHeader><DialogTitle>Gestione Staff</DialogTitle><DialogDescription>Seleziona un'azione da eseguire.</DialogDescription></DialogHeader><div class="grid gap-2 pt-4"><button @click="() => { showStaffMenuDialog = false; openViewStaffDialog(); }" class="flex items-center text-left w-full p-3 rounded-md hover:bg-slate-100 transition-colors"><List class="h-5 w-5 mr-3 text-slate-500" /><span class="font-medium">Visualizza Elenco</span></button><button @click="() => { showStaffMenuDialog = false; openUpdateStaffDialog(); }" class="flex items-center text-left w-full p-3 rounded-md hover:bg-slate-100 transition-colors"><Edit class="h-5 w-5 mr-3 text-slate-500" /><span class="font-medium">Modifica Competenze</span></button><button @click="() => { showStaffMenuDialog = false; openAddStaffDialog(); }" class="flex items-center text-left w-full p-3 rounded-md hover:bg-slate-100 transition-colors"><Users class="h-5 w-5 mr-3 text-slate-500" /><span class="font-medium">Aggiungi Nuovo</span></button></div></DialogContent>
    </Dialog>
    
    <Dialog :open="showConversationModal" @update:open="showConversationModal = $event">
      <DialogContent v-if="selectedEmail" class="p-0 sm:max-w-3xl"><div class="h-[80vh] flex flex-col bg-white"><DialogHeader class="p-6 border-b text-left"><DialogTitle class="text-lg">Conversazione con: {{ selectedEmail.sender }}</DialogTitle><p class="text-sm text-muted-foreground pt-1">Oggetto: {{ selectedEmail.subject }}</p></DialogHeader><div class="flex-grow overflow-y-auto p-4 space-y-4 bg-slate-50"><div v-for="message in conversationHistory" :key="message.id" :class="['flex', message.isOwn ? 'justify-end' : 'justify-start']"><div :class="['max-w-lg p-3 rounded-lg shadow-sm', message.isOwn ? 'bg-purple-600 text-white' : 'bg-white text-gray-800 border']"><p class="text-xs font-bold mb-1">{{ message.sender }}</p><p class="whitespace-pre-wrap text-sm">{{ message.body }}</p><p class="text-xs mt-2 text-right opacity-70">{{ formatDate(message.date) }}</p></div></div></div><div class="p-4 mt-auto border-t bg-white"><div class="grid w-full gap-2"><Textarea v-model="replyText" placeholder="Scrivi la tua risposta qui..." class="min-h-[100px]" /><Button @click="sendReply" :disabled="isReplying || !replyText.trim()" class="bg-purple-600 hover:bg-purple-700 text-white"><Send class="h-4 w-4 mr-2" />{{ isReplying ? 'Invio in corso...' : 'Invia Risposta' }}</Button></div></div></div></DialogContent>
    </Dialog>
    
    <Dialog :open="showAddStaffDialog" @update:open="showAddStaffDialog = $event">
      <DialogContent><DialogHeader class="border-b pb-4"><DialogTitle class="text-xl">Crea Nuovo Profilo Staff</DialogTitle><DialogDescription class="pt-1">VerrÃ  inviata un'email di invito per impostare la password.</DialogDescription></DialogHeader><form @submit.prevent="addStaff"><div class="grid gap-4 py-4"><div class="grid grid-cols-4 items-center gap-4"><Label for="first_name" class="text-right">Nome</Label><Input id="first_name" v-model="newStaffForm.first_name" required class="col-span-3" /></div><div class="grid grid-cols-4 items-center gap-4"><Label for="last_name" class="text-right">Cognome</Label><Input id="last_name" v-model="newStaffForm.last_name" required class="col-span-3" /></div><div class="grid grid-cols-4 items-center gap-4"><Label for="email" class="text-right">Email</Label><Input id="email" type="email" v-model="newStaffForm.email" required class="col-span-3" /></div><div class="grid grid-cols-4 items-center gap-4"><Label for="role" class="text-right">Ruolo</Label><select id="role" v-model="newStaffForm.role" required class="col-span-3 flex h-10 w-full rounded-md border p-2 bg-transparent"><option value="staff">Staff</option><option value="admin">Admin</option></select></div><div class="grid grid-cols-4 items-center gap-4"><Label for="textSkills" class="text-right">Competenze</Label><Textarea id="textSkills" v-model="newStaffForm.text_skills" class="col-span-3" /></div></div><DialogFooter><Button type="button" variant="outline" @click="showAddStaffDialog = false">Annulla</Button><Button type="submit">Crea Utente</Button></DialogFooter></form>
      </DialogContent>
    </Dialog>

    <Dialog :open="showUpdateStaffDialog" @update:open="showUpdateStaffDialog = $event">
      <DialogContent><DialogHeader class="border-b pb-4"><DialogTitle class="text-xl">Modifica Competenze</DialogTitle></DialogHeader><form v-if="allStaffMembers.length" @submit.prevent="updateStaff" class="pt-4"><div class="grid gap-4 py-4"><div class="grid grid-cols-4 items-center gap-4"><Label for="staffSelect" class="text-right">Dipendente</Label><select id="staffSelect" v-model="selectedStaffIdToUpdate" @change="handleStaffSelectionChange" class="col-span-3 flex h-10 w-full rounded-md border p-2 bg-transparent"><option v-for="staff in allStaffMembers" :key="staff.id" :value="staff.id">{{ staff.first_name }} {{ staff.last_name }}</option></select></div><div class="grid grid-cols-4 items-center gap-4"><Label for="updateTextSkills" class="text-right">Competenze</Label><Textarea id="updateTextSkills" v-model="updateStaffForm.text_skills" required class="col-span-3" /></div></div><DialogFooter><Button type="button" variant="outline" @click="showUpdateStaffDialog = false">Annulla</Button><Button type="submit">Salva Modifiche</Button></DialogFooter></form>
      </DialogContent>
    </Dialog>

    <Dialog :open="showViewStaffDialog" @update:open="showViewStaffDialog = $event">
      <DialogContent class="max-w-4xl">
        <DialogHeader class="border-b pb-4"><DialogTitle class="text-xl font-semibold">Elenco Dipendenti</DialogTitle></DialogHeader>
        <div class="mt-4 border rounded-lg overflow-auto max-h-[60vh]">
          <Table class="w-full table-fixed">
            <colgroup><col class="w-[20%]" /><col class="w-[30%]" /><col class="w-[50%]" /></colgroup>
            <TableBody>
              <TableRow v-for="staff in allStaffMembers" :key="staff.id" class="border-t">
                <TableCell class="p-4 font-medium align-top">{{ staff.first_name }} {{ staff.last_name }}</TableCell>
                <TableCell class="p-4 align-top">{{ staff.email }}</TableCell>
                <TableCell class="p-4 text-slate-600 text-sm align-top whitespace-normal">{{ staff.text_skills }}</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </div>
        <DialogFooter class="pt-4"><Button type="button" variant="outline" @click="showViewStaffDialog = false">Chiudi</Button></DialogFooter>
      </DialogContent>
    </Dialog>

    <Dialog :open="showViewClientsDialog" @update:open="showViewClientsDialog = $event">
      <DialogContent class="max-w-5xl">
        <DialogHeader class="border-b pb-4"><DialogTitle class="text-xl font-semibold">Elenco Clienti</DialogTitle></DialogHeader>
        <div class="mt-4 border rounded-lg overflow-auto max-h-[60vh]">
          <Table class="w-full table-fixed">
            <colgroup><col class="w-[30%]" /><col class="w-[25%]" /><col class="w-[20%]" /><col class="w-[25%]" /></colgroup>
            <TableBody>
              <TableRow v-for="client in allClients" :key="client.id" class="border-t">
                <TableCell class="p-4 font-medium">{{ client.email }}</TableCell>
                <TableCell class="p-4">{{ client.name || 'N/D' }}</TableCell>
                <TableCell class="p-4">{{ client.phone_number || 'N/D' }}</TableCell>
                <TableCell class="p-4">{{ client.city || 'N/D' }}</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </div>
        <DialogFooter class="pt-4"><Button type="button" variant="outline" @click="showViewClientsDialog = false">Chiudi</Button></DialogFooter>
      </DialogContent>
    </Dialog>
  </div>
</template>


================================================
FILE: pages/login.vue
================================================
<script setup>
import { ref } from 'vue';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

const supabase = useSupabaseClient();
const router = useRouter();
const email = ref('');
const password = ref('');
const errorMessage = ref(null);
const loading = ref(false);

const handleLogin = async () => {
  loading.value = true;
  errorMessage.value = null;
  try {
    const { error } = await supabase.auth.signInWithPassword({
      email: email.value,
      password: password.value,
    });
    if (error) throw error;
    router.push('/');
  } catch (error) {
    errorMessage.value = error.message;
  } finally {
    loading.value = false;
  }
};
</script>

<template>
  <div class="relative min-h-screen w-full flex items-center justify-center overflow-hidden">
    
    <video 
      autoplay 
      loop 
      muted 
      playsinline 
      class="absolute z-0 w-full h-full object-cover"
    >
      <source src="/videos/vidLogin.mp4" type="video/mp4">
      Il tuo browser non supporta i video.
    </video>
    
    <div class="absolute z-10 inset-0 bg-black/50"></div>

    <div class="relative z-20 flex flex-col items-center justify-center p-4">
      <div class="mb-8 text-center">
        <h1 class="text-5xl font-bold text-white [text-shadow:_0_2px_4px_rgb(0_0_0_/_40%)]">
          Flashmail
        </h1>
        <p class="text-gray-300 mt-2 [text-shadow:_0_1px_2px_rgb(0_0_0_/_30%)]">
          Il tuo assistente intelligente per la gestione della posta
        </p>
      </div>

      <Card class="w-full max-w-md bg-gray-900/40 backdrop-blur-md border-gray-500/30 text-white">
        <CardHeader class="text-center">
          <CardTitle class="text-2xl text-white">Bentornato!</CardTitle>
          <CardDescription class="text-gray-400">Accedi al tuo account per continuare</CardDescription>
        </CardHeader>
        <CardContent>
          <form @submit.prevent="handleLogin" class="space-y-4">
            <div class="space-y-2">
              <Label for="email" class="text-gray-300">Email</Label>
              <Input
                id="email"
                type="email"
                v-model="email"
                required
                placeholder="mario.rossi@esempio.com"
                class="bg-gray-800/50 border-gray-600 text-white placeholder:text-gray-500 focus:ring-white"
              />
            </div>
            <div class="space-y-2">
              <div class="flex items-center justify-between">
                <Label for="password" class="text-gray-300">Password</Label>
                <!-- Link aggiornato -->
                <NuxtLink to="/forgot-password" class="text-xs text-gray-400 hover:text-white hover:underline">
                  Password dimenticata?
                </NuxtLink>
              </div>
              <Input
                id="password"
                type="password"
                v-model="password"
                required
                class="bg-gray-800/50 border-gray-600 text-white placeholder:text-gray-500 focus:ring-white"
              />
            </div>
            <div v-if="errorMessage" class="text-red-400 text-sm pt-2">
              {{ errorMessage }}
            </div>
            <Button type="submit" class="w-full mt-4 bg-white text-gray-900 hover:bg-gray-200" :disabled="loading">
              {{ loading ? 'Accesso in corso...' : 'Accedi' }}
            </Button>
            
          </form>
        </CardContent>
      </Card>
    </div>
  </div>
</template>


================================================
FILE: pages/profile.vue
================================================
<script setup>
import { ref, reactive, onMounted } from 'vue';
import { useSupabaseClient, useSupabaseUser } from '#imports';
import { useRouter } from 'vue-router';
import { useToast } from '@/components/ui/toast/use-toast';
import { Toaster } from '@/components/ui/toast';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ArrowLeft, LoaderCircle } from 'lucide-vue-next';

const supabase = useSupabaseClient();
const user = useSupabaseUser();
const router = useRouter();
const { toast } = useToast();

const isUploading = ref(false);
const loadingProfile = ref(true);

const profile = reactive({
  email: '',
  first_name: '',
  last_name: '',
  text_skills: '',
});

const avatarUrl = ref('');
const avatarFile = ref(null);

onMounted(async () => {
  if (!user.value) {
    router.push('/login');
    return;
  }
  try {
    const { data, error } = await supabase.from('staff').select('first_name, last_name, text_skills').eq('user_id', user.value.id).single();
    if (error) throw error;
    
    avatarUrl.value = user.value.user_metadata.avatar_url || '';
    
    profile.email = user.value.email;
    if (data) {
      profile.first_name = data.first_name;
      profile.last_name = data.last_name;
      profile.text_skills = data.text_skills;
    }
  } catch (error) {
    toast({ title: 'Errore', description: 'Impossibile caricare i dati del profilo.', variant: 'destructive' });
  } finally {
    loadingProfile.value = false;
  }
});

const handleFileChange = (event) => {
  const file = event.target.files?.[0];
  if (file) {
    avatarFile.value = file;
    // NON usiamo piÃ¹ l'anteprima blob per evitare problemi
  }
};

const handleProfileUpdate = async () => {
  isUploading.value = true;
  console.log('--- Inizio Aggiornamento Profilo ---');

  try {
    // === PASSO 1: Aggiorna nome e cognome nella tabella staff ===
    console.log('Passo 1: Aggiornamento nome e cognome...');
    const { error: staffError } = await supabase
      .from('staff')
      .update({
        first_name: profile.first_name,
        last_name: profile.last_name,
      })
      .eq('user_id', user.value.id);

    if (staffError) {
      console.error('Errore durante l\'aggiornamento dello staff:', staffError);
      throw new Error(`Errore DB: ${staffError.message}`);
    }
    console.log('Passo 1: Successo!');

    // === PASSO 2: Gestisci il caricamento dell'avatar, se presente ===
    if (avatarFile.value) {
      console.log('Passo 2: Rilevato nuovo file avatar. Inizio caricamento...');
      const file = avatarFile.value;
      const fileExt = file.name.split('.').pop();
      const filePath = `${user.value.id}/${Date.now()}.${fileExt}`;

      console.log('Caricamento su Storage in corso...');
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(filePath, file, { upsert: true });

      if (uploadError) {
        console.error('Errore durante il caricamento su Storage:', uploadError);
        throw new Error(`Errore Storage: ${uploadError.message}`);
      }
      console.log('Caricamento su Storage completato:', uploadData);

      console.log('Recupero URL pubblico...');
      const { data: urlData } = supabase.storage
        .from('avatars')
        .getPublicUrl(filePath);

      const newPublicUrl = urlData.publicUrl;
      console.log('URL Pubblico ottenuto:', newPublicUrl);

      // === PASSO 3: Aggiorna i metadati dell'utente in Auth ===
      console.log('Passo 3: Aggiornamento metadati utente in Auth...');
      const { data: updateUserData, error: updateUserError } = await supabase.auth.updateUser({
        data: { avatar_url: newPublicUrl },
      });

      if (updateUserError) {
        console.error('Errore durante l\'aggiornamento dei metadati utente:', updateUserError);
        throw new Error(`Errore Auth: ${updateUserError.message}`);
      }
      console.log('Passo 3: Successo! Risposta da updateUser:', updateUserData);
    } else {
        console.log("Nessun nuovo file avatar da caricare. Saltato Passo 2 e 3.");
    }
    
    // === PASSO 4: Successo e ricaricamento pagina ===
    console.log('--- Aggiornamento Profilo Completato con Successo ---');
    toast({ title: 'Successo!', description: 'Il tuo profilo Ã¨ stato aggiornato.' });
    
    setTimeout(() => {
      window.location.reload();
    }, 1500);

  } catch (error) {
    console.error('--- ERRORE FINALE CATTURATO ---', error);
    toast({ title: 'Errore', description: error.message || 'Si Ã¨ verificato un problema imprevisto.', variant: 'destructive' });
    isUploading.value = false;
  }
};
</script>

<template>
  <div class="min-h-screen bg-slate-50">
    <Toaster />
    <header class="bg-purple-700 text-white shadow-md sticky top-0 z-30">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center h-16">
                <NuxtLink to="/" class="flex items-center gap-2 hover:text-purple-200 transition-colors">
                    <ArrowLeft class="h-5 w-5" />
                    <span class="font-medium">Torna alla Dashboard</span>
                </NuxtLink>
            </div>
        </div>
    </header>
    <main class="container mx-auto p-4 sm:p-6 lg:p-8">
        <div v-if="loadingProfile" class="flex justify-center items-center h-64">
            <LoaderCircle class="h-8 w-8 animate-spin text-indigo-500" />
        </div>
        <div v-else class="max-w-4xl mx-auto space-y-8">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Il Mio Profilo</h1>
                <p class="text-gray-500 mt-1">Gestisci le tue informazioni personali e preferenze.</p>
            </div>
            <form @submit.prevent="handleProfileUpdate" class="space-y-6">
                <Card class="border-indigo-200 shadow-sm">
                    <CardHeader>
                        <CardTitle>Immagine Profilo</CardTitle>
                    </CardHeader>
                    <CardContent class="flex items-center gap-6">
                        <Avatar class="h-24 w-24">
                            <AvatarImage :src="avatarUrl" alt="Avatar" />
                            <AvatarFallback class="bg-slate-200 text-3xl">
                                {{ profile.first_name?.charAt(0) }}{{ profile.last_name?.charAt(0) }}
                            </AvatarFallback>
                        </Avatar>
                        <div class="grid w-full max-w-sm items-center gap-1.5">
                            <Label for="picture">Carica una nuova immagine</Label>
                            <Input id="picture" type="file" @change="handleFileChange" accept="image/png, image/jpeg" />
                            <p class="text-sm text-muted-foreground">PNG o JPG (consigliato 1:1).</p>
                        </div>
                    </CardContent>
                </Card>
                <Card class="border-indigo-200 shadow-sm">
                    <CardHeader>
                        <CardTitle>Informazioni Personali</CardTitle>
                        <CardDescription>Queste informazioni saranno visibili agli amministratori.</CardDescription>
                    </CardHeader>
                    <CardContent class="space-y-4 pt-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="space-y-2"><Label for="first_name">Nome</Label><Input id="first_name" v-model="profile.first_name" /></div>
                            <div class="space-y-2"><Label for="last_name">Cognome</Label><Input id="last_name" v-model="profile.last_name" /></div>
                        </div>
                        <div class="space-y-2"><Label for="email">Email</Label><Input id="email" v-model="profile.email" disabled class="bg-slate-100 cursor-not-allowed" /></div>
                        <div class="space-y-2"><Label for="text_skills">Descrizione Competenze</Label><Textarea id="text_skills" v-model="profile.text_skills" disabled class="bg-slate-100 min-h-[100px] cursor-not-allowed" /></div>
                    </CardContent>
                </Card>
                <div class="flex justify-end">
                    <Button type="submit" :disabled="isUploading" class="bg-purple-700 hover:bg-purple-800 text-white">
                        <LoaderCircle v-if="isUploading" class="mr-2 h-4 w-4 animate-spin" />
                        {{ isUploading ? 'Salvataggio...' : 'Salva Modifiche' }}
                    </Button>
                </div>
            </form>
        </div>
    </main>
  </div>
</template>


================================================
FILE: pages/update-password.vue
================================================
<script setup>
import { ref, onMounted } from 'vue';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/components/ui/toast/use-toast';
import { Toaster } from '@/components/ui/toast';

definePageMeta({ layout: false });

const supabase = useSupabaseClient();
const router = useRouter();
const user = useSupabaseUser();
const { toast } = useToast();

const password = ref('');
const confirmPassword = ref('');
const loading = ref(false);

onMounted(() => {
    // Il middleware di Supabase ha giÃ  autenticato l'utente grazie al token.
    // Se, per qualche strano motivo, l'utente arriva qui senza essere loggato,
    // lo rimandiamo alla pagina di login per sicurezza.
    if (!user.value) {
        toast({ title: 'Errore', description: 'Link non valido o scaduto. Richiedi un nuovo link.', variant: 'destructive'});
        router.replace('/login');
    }
});

const handleUpdatePassword = async () => {
  if (password.value !== confirmPassword.value || password.value.length < 6) {
    toast({ title: 'Errore', description: 'Le password non coincidono o sono troppo corte.', variant: 'destructive' });
    return;
  }
  loading.value = true;
  const { error } = await supabase.auth.updateUser({ password: password.value });
  loading.value = false;
  if (error) {
    toast({ title: 'Errore', description: error.message, variant: 'destructive' });
  } else {
    toast({ title: 'Successo!', description: 'Password aggiornata. Verrai reindirizzato al login.' });
    await supabase.auth.signOut();
    setTimeout(() => router.push('/login'), 2000);
  }
};
</script>

<template>
  <div class="relative min-h-screen w-full flex items-center justify-center overflow-hidden bg-gray-900">
    <Toaster />
    <video autoplay loop muted playsinline class="absolute z-0 w-full h-full object-cover opacity-30"><source src="/videos/vidRegister.mp4" type="video/mp4"></video>
    <div v-if="user" class="relative z-20 flex flex-col items-center justify-center p-4">
      <Card class="w-full max-w-md bg-gray-900/40 backdrop-blur-md border-gray-500/30 text-white">
        <CardHeader class="text-center">
          <CardTitle class="text-2xl text-white">Imposta Nuova Password</CardTitle>
          <CardDescription class="text-gray-400">Ciao, {{ user.email }}. Scegli una nuova password sicura.</CardDescription>
        </CardHeader>
        <CardContent>
          <form @submit.prevent="handleUpdatePassword" class="space-y-4">
            <div class="space-y-2"><Label for="password" class="text-gray-300">Nuova Password</Label><Input id="password" type="password" v-model="password" required class="bg-gray-800/50 border-gray-600 text-white"/></div>
            <div class="space-y-2"><Label for="confirmPassword" class="text-gray-300">Conferma Password</Label><Input id="confirmPassword" type="password" v-model="confirmPassword" required class="bg-gray-800/50 border-gray-600 text-white"/></div>
            <Button type="submit" class="w-full bg-white text-gray-900 hover:bg-gray-200" :disabled="loading">{{ loading ? 'Aggiornamento...' : 'Aggiorna e Accedi' }}</Button>
          </form>
        </CardContent>
      </Card>
    </div>
  </div>
</template>


================================================
FILE: plugins/particles.client.ts
================================================
import Particles from "@tsparticles/vue3";
import { loadFull } from "tsparticles"; // Carica il pacchetto completo di particelle

export default defineNuxtPlugin(async (nuxtApp) => {
    // Registra il componente Vue
    nuxtApp.vueApp.use(Particles, {
        init: async (engine) => {
            // Inizializza il motore tsparticles con il pacchetto completo
            await loadFull(engine);
        },
    });
});


================================================
FILE: public/robots.txt
================================================
User-Agent: *
Disallow:



================================================
FILE: server/tsconfig.json
================================================
{
  "extends": "../.nuxt/tsconfig.server.json"
}



================================================
FILE: server/api/clients.get.js
================================================
// server/api/clients.get.js

import { defineEventHandler } from 'h3';
import { getSupabaseAdminClient } from '../utils/supabaseAdmin'; // Usa il client admin per sicurezza e consistenza

export default defineEventHandler(async (event) => {
  const supabaseAdmin = getSupabaseAdminClient();

  const { data, error } = await supabaseAdmin
    .from('clients')
    .select('id, created_at, email, name, phone_number, city, follow_up_email_sent, follow_up_sent_at') // Seleziona tutte le colonne pertinenti
    .order('created_at', { ascending: false }); // Ordina per data di creazione, i piÃƒÂ¹ recenti prima

  if (error) {
    console.error('Supabase clients fetch error:', error.message);
    throw createError({ statusCode: 500, statusMessage: error.message });
  }

  return data;
});


================================================
FILE: server/api/inbox.get.js
================================================
// server/api/inbox.get.js
import { defineEventHandler } from 'h3';
import { serverSupabaseClient } from '#supabase/server';

export default defineEventHandler(async (event) => {
  const supabase = await serverSupabaseClient(event);

  const { data, error } = await supabase
    .from('incoming_emails')
    .select(`
      id,
      created_at,
      sender,
      subject,
      body_text,
      status,
      is_urgent,
      ai_confidence_score,
      assigned_to_staff_id, 
      staff:assigned_to_staff_id ( id, first_name, last_name, email ),
      attachments:email-attachments ( filename, mimetype, size, public_url )
    `)
    .not('assigned_to_staff_id', 'is', null) 
    .neq('status', 'follow_up_sent')
    .order('created_at', { ascending: false });

  if (error) {
      console.error('API inbox.get.js error:', error.message);
      throw createError({ statusCode: 500, statusMessage: error.message });
  }
  
  return data;
});


================================================
FILE: server/api/staff.get.js
================================================
// server/api/staff.get.js
import { defineEventHandler } from 'h3';
import { serverSupabaseClient } from '#supabase/server';

export default defineEventHandler(async (event) => {
  const supabase = await serverSupabaseClient(event);

  const { data, error } = await supabase
    .from('staff')
    // MODIFICATO QUI: Seleziona i nuovi campi
    .select('id, first_name, last_name, email, text_skills, skills, role') 
    .order('first_name', { ascending: true });

  if (error) {
    console.error('Supabase staff fetch error:', error.message);
    throw createError({ statusCode: 500, statusMessage: error.message });
  }

  return data;
});


================================================
FILE: server/api/staff.post.js
================================================
import { defineEventHandler, readBody } from 'h3';
import { getSupabaseAdminClient } from '../utils/supabaseAdmin';
import { extractSkillsFromText } from '../utils/skillExtractor';

export default defineEventHandler(async (event) => {
  const supabaseAdmin = getSupabaseAdminClient();
  const { name, text_skills, user_id } = await readBody(event); // Modificato: ora riceviamo user_id

  if (!name || !text_skills || !user_id) {
    throw createError({ statusCode: 400, statusMessage: 'Nome, competenze e utente sono obbligatori.' });
  }
  
  // Opzionale: controlla se l'utente esiste in auth.users
  const { data: user, error: userError } = await supabaseAdmin.auth.admin.getUserById(user_id);
  if (userError || !user) {
    throw createError({ statusCode: 404, statusMessage: "L'utente selezionato non esiste." });
  }

  const skills = await extractSkillsFromText(text_skills);

  const { data, error } = await supabaseAdmin
    .from('staff')
    .insert({
      name: name,
      email: user.user.email, // Prendiamo l'email dall'utente di Supabase Auth
      text_skills: text_skills,
      skills: skills,
      user_id: user_id, // Salviamo il collegamento
      role: 'staff' // Impostiamo il ruolo di default
    })
    .select()
    .single();

  if (error) {
    if (error.code === '23505') { // Errore di unicitÃ 
      throw createError({ statusCode: 409, statusMessage: 'Questo utente Ã¨ giÃ  stato aggiunto allo staff.' });
    }
    console.error('API Supabase staff insert error:', error.message);
    throw createError({ statusCode: 500, statusMessage: `Errore durante l'aggiunta: ${error.message}` });
  }

  return { status: 'success', data: data };
});


================================================
FILE: server/api/users.get.js
================================================
// server/api/users.get.js
import { getSupabaseAdminClient } from '~/server/utils/supabaseAdmin';

export default defineEventHandler(async (event) => {
    const supabaseAdmin = getSupabaseAdminClient();

    try {
        // 1. Prendi tutti gli utenti registrati
        const { data: { users }, error: usersError } = await supabaseAdmin.auth.admin.listUsers();
        if (usersError) {
            console.error("Error fetching users from Supabase Auth:", usersError);
            throw createError({ statusCode: 500, statusMessage: usersError.message });
        }

        // 2. Prendi tutti gli ID degli utenti che sono giÃ  nello staff
        const { data: staff, error: staffError } = await supabaseAdmin
            .from('staff')
            .select('user_id');
        if (staffError) {
            console.error("Error fetching staff:", staffError);
            throw createError({ statusCode: 500, statusMessage: staffError.message });
        }
        
        const staffUserIds = staff.map(s => s.user_id).filter(id => id);

        // 3. Restituisci solo gli utenti che NON sono giÃ  nello staff
        const usersWithoutProfile = users.filter(u => !staffUserIds.includes(u.id));
        
        // Restituisci solo i campi che ci servono per il menu a tendina
        return usersWithoutProfile.map(u => ({ id: u.id, email: u.email }));

    } catch (error) {
        console.error("Unhandled error in /api/users:", error);
        // Assicurati di restituire un errore strutturato
        throw createError({
            statusCode: 500,
            statusMessage: 'Internal Server Error',
        });
    }
});


================================================
FILE: server/api/emails/process.post.js
================================================
// File: server/api/emails/process.post.js

import { defineEventHandler, readBody, createError, setResponseStatus } from 'h3';
import { getSupabaseAdminClient } from '../../utils/supabaseAdmin'; // CAMBIATO: Usa il client Admin
import { analyzeEmailWithAI } from '../../utils/aiService'; // Funzione centralizzata per l'analisi AI
import { sendEmail } from '../../utils/emailSender';     // Funzione centralizzata per l'invio email

export default defineEventHandler(async (event) => {
  const supabaseAdmin = getSupabaseAdminClient(); // Usa il client Supabase Admin
  const body = await readBody(event);
  const { sender, subject, body_text } = body;

  console.log('API Manual Process POST: Ricevuti dati ->', { sender, subject: subject ? subject.substring(0, 50) + '...' : 'N/A' });

  if (!sender || !subject || !body_text) {
    throw createError({ statusCode: 400, statusMessage: 'Mittente, oggetto o corpo email mancanti.' });
  }

  let emailRecordId = null; // ID dell'email nel DB, per aggiornamenti successivi

  try {
    // 1. Salva l'email nel database con stato 'new'
    const { data: savedEmail, error: saveError } = await supabaseAdmin.from('incoming_emails').insert([{ // CAMBIATO: usa supabaseAdmin
        sender: sender,
        subject: subject,
        body_text: body_text,
        // body_html: null, // Non abbiamo HTML dal form manuale, quindi null
        status: 'new',
    }]).select().single();

    if (saveError) {
        console.error('API Supabase save error (process.post):', saveError.message);
        throw createError({ statusCode: 500, statusMessage: `Errore durante il salvataggio dell'email: ${saveError.message}` });
    }
    emailRecordId = savedEmail.id;
    console.log(`API Manual Process POST: Manual email saved to DB with ID: ${emailRecordId}`);

    // 2. Analisi AI
    console.log(`API Manual Process POST: Avvio analisi AI per email ID ${emailRecordId}...`);
    const aiResult = await analyzeEmailWithAI(sender, subject, body_text);
    console.log(`API Manual Process POST: Risultato analisi AI per ID ${emailRecordId}:`, aiResult);
    
    // 3. Aggiorna l'email nel DB con i risultati dell'AI
    const newStatus = aiResult.assigned_to_staff_id ? 'analyzed' : 'manual_review';
    const { error: updateError } = await supabaseAdmin.from('incoming_emails').update({ // CAMBIATO: usa supabaseAdmin
        assigned_to_staff_id: aiResult.assigned_to_staff_id,
        ai_confidence_score: aiResult.ai_confidence_score,
        ai_reasoning: aiResult.ai_reasoning,
        status: newStatus,
    }).eq('id', emailRecordId);

    if (updateError) {
        console.error('API Supabase AI update error (process.post):', updateError.message);
        throw createError({ statusCode: 500, statusMessage: `Errore durante l'aggiornamento AI dell'email: ${updateError.message}` });
    }
    console.log(`API Manual Process POST: AI analysis updated for manual email ID ${emailRecordId}. Assigned to staff: ${aiResult.assigned_to_staff_id || 'N/A'}`);

    // 4. Se l'AI ha assegnato e trovato un'email, inoltra l'email
    let assignedStaffMember = null;
    if (aiResult.assigned_to_staff_id && aiResult.assignedStaffEmail) {
        try {
            console.log(`API Manual Process POST: Tentativo di inoltro email ID ${emailRecordId} a ${aiResult.assignedStaffEmail}...`);
            await sendEmail(
                aiResult.assignedStaffEmail,
                sender.split('<')[0].trim() || sender, // Nome dal mittente originale
                sender, // Email mittente originale
                subject,
                body_text, // Invia il testo originale
                aiResult.ai_reasoning
            );
            // Aggiorna lo stato a 'forwarded'
            await supabaseAdmin.from('incoming_emails').update({ // CAMBIATO: usa supabaseAdmin
                status: 'forwarded'
            }).eq('id', emailRecordId);

            assignedStaffMember = { 
                id: aiResult.assigned_to_staff_id, 
                name: aiResult.assignedStaffName, 
                email: aiResult.assignedStaffEmail 
            };
            console.log(`API Manual Process POST: Manual email ID ${emailRecordId} successfully forwarded to ${aiResult.assignedStaffEmail}`);

        } catch (forwardError) {
            console.error('API Error during manual email forwarding (process.post):', forwardError);
            // Aggiorna lo stato a 'forward_error'
            await supabaseAdmin.from('incoming_emails').update({ // CAMBIATO: usa supabaseAdmin
                status: 'forward_error'
            }).eq('id', emailRecordId);
            throw createError({ statusCode: 500, statusMessage: `Errore durante l'inoltro dell'email: ${forwardError.message}` });
        }
    } else {
        console.warn(`API Manual Process POST: Manual email ID ${emailRecordId} not assigned by AI or missing staff email. Status set to 'manual_review'.`);
        // Lo stato ÃƒÂ¨ giÃƒÂ  'manual_review' dal passo precedente
    }

    setResponseStatus(event, 200);
    return { 
      status: 'success',
      message: 'Email processata e assegnata con successo.', 
      assignment: assignedStaffMember, 
      emailRecord: savedEmail 
    };

  } catch (error) {
    console.error('Unhandled error in process.post.js:', error);
    // Se c'ÃƒÂ¨ un errore e emailRecordId ÃƒÂ¨ noto, prova ad aggiornare lo stato a 'processing_error'
    if (emailRecordId) {
        await supabaseAdmin.from('incoming_emails').update({ // CAMBIATO: usa supabaseAdmin
            status: 'processing_error',
            // error_message: error.message // Se hai un campo per i messaggi di errore
        }).eq('id', emailRecordId);
    }
    setResponseStatus(event, error.statusCode || 500);
    return { 
        status: 'error',
        message: error.statusMessage || 'Si ÃƒÂ¨ verificato un errore imprevisto.',
        details: error.message // Per dettagli nell'errore frontend
    };
  }
});


================================================
FILE: server/api/emails/reply.post.js
================================================
import { defineEventHandler, readBody } from 'h3';
import sgMail from '@sendgrid/mail';
import { getSupabaseAdminClient } from '../../utils/supabaseAdmin';

export default defineEventHandler(async (event) => {
  const config = useRuntimeConfig();
  const supabaseAdmin = getSupabaseAdminClient();
  sgMail.setApiKey(config.sendgridApiKey);

  const { originalEmailId, replyText, employeeEmail } = await readBody(event);

  if (!originalEmailId || !replyText || !employeeEmail) {
    throw createError({ statusCode: 400, statusMessage: 'Missing required fields for reply.' });
  }

  // 1. Recupera i dettagli dell'email originale per sapere a chi rispondere.
  const { data: originalEmail, error: fetchError } = await supabaseAdmin
    .from('incoming_emails')
    .select('sender, subject, reference')
    .eq('id', originalEmailId)
    .single();

  if (fetchError || !originalEmail) {
    throw createError({ statusCode: 404, statusMessage: 'Original email not found.' });
  }

  // 2. Invia l'email di risposta usando SendGrid
  const msg = {
    to: originalEmail.sender, // Rispondi al mittente originale
    from: {
        name: 'Studio Commercialista', // Puoi personalizzarlo
        email: config.senderEmail, // La tua email di invio verificata
    },
    subject: `Re: ${originalEmail.subject}`,
    text: replyText, // Il testo inserito dal dipendente
    headers: {
      'In-Reply-To': `<${originalEmail.reference}>`,
      'References': `<${originalEmail.reference}>`
    }
  };

  try {
    await sgMail.send(msg);
  } catch (error) {
    console.error("Error sending reply via SendGrid:", error.response?.body || error);
    throw createError({ statusCode: 500, statusMessage: 'Failed to send reply email.' });
  }

  // 3. Salva la risposta inviata nel database per tener traccia della conversazione
  const { error: saveReplyError } = await supabaseAdmin
    .from('incoming_emails') // Usiamo la stessa tabella per semplicitÃ 
    .insert({
        sender: employeeEmail, // Il mittente Ã¨ il dipendente/studio
        subject: msg.subject,
        body_text: replyText,
        status: 'replied_by_staff', // Un nuovo stato per le risposte
        // Associa questa risposta all'email originale (richiede modifica allo schema DB)
        // Per ora, lo omettiamo, ma sarebbe ideale avere un campo 'parent_email_id'
    });
    
  if (saveReplyError) {
    // Non blocchiamo l'utente per questo, ma logghiamo l'errore
    console.error("Failed to save staff reply to DB:", saveReplyError);
  }

  // 4. (Opzionale) Aggiorna lo stato dell'email originale a "answered"
  await supabaseAdmin
    .from('incoming_emails')
    .update({ status: 'answered' })
    .eq('id', originalEmailId);


  return { success: true, message: 'Reply sent successfully.' };
});


================================================
FILE: server/api/emails/webhook.post.js
================================================
// File: server/api/emails/webhook.post.js

import { defineEventHandler, readBody, setResponseStatus } from 'h3';
import { getSupabaseAdminClient } from '../../utils/supabaseAdmin'; // CAMBIATO: Usa il client Admin
import { analyzeEmailWithAI } from '../../utils/aiService'; // Funzione centralizzata per l'analisi AI
import { sendEmail } from '../../utils/emailSender';     // Funzione centralizzata per l'invio email

export default defineEventHandler(async (event) => {
    const supabaseAdmin = getSupabaseAdminClient(); // Usa il client Supabase Admin
    const payload = await readBody(event); // Il payload del webhook (es. da SendGrid Inbound Parse)

    // Estrai i dati dal payload (questi campi sono comuni nei webhook di parsing email)
    const senderRaw = payload.from || ''; 
    const senderEmail = senderRaw.match(/<(.+)>/)?.[1] || senderRaw; // Estrae solo l'email da "Nome <email@example.com>"
    const senderName = senderRaw.replace(/<.+>/, '').trim() || senderEmail;
    const subject = payload.subject || 'Nessun Oggetto';
    const body_text = payload.text || payload.html || 'Corpo email vuoto.';
    const body_html = payload.html || null;

    console.log('Webhook POST: Ricevuti dati ->', { senderEmail, subject: subject ? subject.substring(0, 50) + '...' : 'N/A' });


    if (!senderEmail) {
      console.warn("Webhook ricevuto senza mittente valido. Ignorato.");
      setResponseStatus(event, 200); // Importante rispondere 200 OK per evitare re-invii da webhook
      return { status: "ignored", message: "Payload incompleto, email ignorata."};
    }

    let emailRecordId = null;

    try {
        // 1. Salva l'email nel database con stato 'new'
        const { data: savedEmail, error: saveError } = await supabaseAdmin.from('incoming_emails').insert([{ // CAMBIATO: usa supabaseAdmin
            sender: senderEmail,
            subject: subject, 
            body_text: body_text, 
            body_html: body_html,
            status: 'new',
        }]).select().single();
        
        if (saveError) {
            console.error('Webhook Supabase save error (webhook.post):', saveError.message);
            throw new Error(`Errore Supabase (insert): ${saveError.message}`); // Rilancia per cattura successiva
        }
        emailRecordId = savedEmail.id;
        console.log(`Webhook POST: Email saved to DB with ID: ${emailRecordId}`);

        // 2. Analisi AI
        console.log(`Webhook POST: Avvio analisi AI per email ID ${emailRecordId}...`);
        const aiResult = await analyzeEmailWithAI(senderEmail, subject, body_text);
        console.log(`Webhook POST: Risultato analisi AI per ID ${emailRecordId}:`, aiResult);

        // 3. Aggiorna l'email nel DB con i risultati dell'AI
        const newStatus = aiResult.assigned_to_staff_id ? 'analyzed' : 'manual_review';
        const { error: updateError } = await supabaseAdmin.from('incoming_emails').update({ // CAMBIATO: usa supabaseAdmin
            assigned_to_staff_id: aiResult.assigned_to_staff_id,
            ai_confidence_score: aiResult.ai_confidence_score,
            ai_reasoning: aiResult.ai_reasoning,
            status: newStatus,
        }).eq('id', emailRecordId);

        if (updateError) {
            console.error('Webhook Supabase AI update error (webhook.post):', updateError.message);
            throw new Error(`Errore Supabase (update AI): ${updateError.message}`);
        }
        console.log(`Webhook POST: AI analysis updated for webhook email ID ${emailRecordId}. Assigned to staff: ${aiResult.assigned_to_staff_id || 'N/A'}`);

        // 4. Inoltra l'email al dipendente corretto
        if (aiResult.assigned_to_staff_id && aiResult.assignedStaffEmail) {
            try {
                console.log(`Webhook POST: Tentativo di inoltro email ID ${emailRecordId} a ${aiResult.assignedStaffEmail}...`);
                await sendEmail(
                    aiResult.assignedStaffEmail,
                    senderName,
                    senderEmail,
                    subject,
                    body_text, // O body_html se preferisci, a seconda di sendEmail
                    aiResult.ai_reasoning
                );
                // Aggiorna lo stato a 'forwarded'
                await supabaseAdmin.from('incoming_emails').update({ // CAMBIATO: usa supabaseAdmin
                    status: 'forwarded'
                }).eq('id', emailRecordId);
                console.log(`Webhook POST: Email ID ${emailRecordId} successfully forwarded to ${aiResult.assignedStaffEmail}`);

            } catch (forwardError) {
                console.error('Webhook Error during email forwarding (webhook.post):', forwardError);
                // Aggiorna lo stato a 'forward_error'
                await supabaseAdmin.from('incoming_emails').update({ // CAMBIATO: usa supabaseAdmin
                    status: 'forward_error'
                }).eq('id', emailRecordId);
                throw forwardError; // Rilancia l'errore per il catch generale
            }
        } else {
            console.warn(`Webhook POST: Email ID ${emailRecordId} not assigned by AI or missing staff email. Status set to 'manual_review'.`);
            // Lo stato ÃƒÂ¨ giÃƒÂ  'manual_review'
        }

        setResponseStatus(event, 200); // Sempre 200 OK per i webhook che hanno elaborato il messaggio
        return { status: 'success', message: `Email da ${senderEmail} processata e assegnata.` };

    } catch (error) {
        console.error('Unhandled error in webhook.post.js:', error);
        // Se c'ÃƒÂ¨ un errore e emailRecordId ÃƒÂ¨ noto, prova ad aggiornare lo stato a 'processing_error'
        if (emailRecordId) {
            await supabaseAdmin.from('incoming_emails').update({ // CAMBIATO: usa supabaseAdmin
                status: 'processing_error',
                // error_message: error.message // Se hai un campo per i messaggi di errore
            }).eq('id', emailRecordId);
        }
        setResponseStatus(event, 200); // **IMPORTANTE:** Rispondi sempre 200 OK ai webhook per evitare re-invii continui, anche in caso di errore interno.
        return { status: 'error', message: `Errore interno durante l'elaborazione del webhook: ${error.message}` };
    }
});


================================================
FILE: server/api/staff/[id].put.js
================================================
// server/api/staff/[id].put.js

// --- MODIFICA QUI ---
// Abbiamo separato gli import. `serverSupabaseUser` ora viene da '#supabase/server'.
import { defineEventHandler, readBody, getRouterParams } from 'h3';
import { serverSupabaseUser } from '#supabase/server';
// --- FINE MODIFICA ---

import { getSupabaseAdminClient } from '../../utils/supabaseAdmin';
import { extractSkillsFromText } from '../../utils/skillExtractor';

export default defineEventHandler(async (event) => {
    const supabaseAdmin = getSupabaseAdminClient();
    const { id: staffIdToUpdate } = getRouterParams(event); // ID del profilo da aggiornare
    const user = await serverSupabaseUser(event); // Utente autenticato che fa la richiesta

    // 1. Sicurezza: Controlla che ci sia un utente autenticato
    if (!user) {
        throw createError({ statusCode: 401, statusMessage: 'Unauthorized' });
    }

    // 2. Sicurezza: Controlla che l'utente stia modificando il proprio profilo staff
    const { data: userStaffProfile, error: profileError } = await supabaseAdmin
        .from('staff')
        .select('id, role')
        .eq('user_id', user.id)
        .single();
    
    if (profileError || !userStaffProfile) {
        throw createError({ statusCode: 403, statusMessage: 'Forbidden: No staff profile found for this user.' });
    }
    
    // Un utente puÃ² modificare se stesso, un admin puÃ² modificare chiunque
    if (userStaffProfile.id !== staffIdToUpdate && userStaffProfile.role !== 'admin') {
         throw createError({ statusCode: 403, statusMessage: 'Forbidden: You can only update your own profile.' });
    }

    // 3. Leggi il body e prepara l'aggiornamento
    const body = await readBody(event);
    const { first_name, last_name, text_skills } = body;

    const updatePayload = {};

    if (first_name) updatePayload.first_name = first_name;
    if (last_name) updatePayload.last_name = last_name;
    
    // Solo se text_skills Ã¨ presente, ricalcola le skills
    if (text_skills !== undefined && text_skills !== null) {
        if (text_skills.trim() === '') {
            throw createError({ statusCode: 400, statusMessage: 'Il campo "Descrizione Competenze" non puÃ² essere vuoto.' });
        }
        updatePayload.text_skills = text_skills;
        updatePayload.skills = await extractSkillsFromText(text_skills);
    }
    
    if (Object.keys(updatePayload).length === 0) {
        return { status: 'noop', message: 'Nessun dato da aggiornare.' };
    }
    
    // 4. Esegui l'aggiornamento
    const { data, error } = await supabaseAdmin
      .from('staff')
      .update(updatePayload)
      .eq('id', staffIdToUpdate)
      .select()
      .single();

    if (error) {
      console.error('API Supabase staff update error:', error.message);
      throw createError({ statusCode: 500, statusMessage: `Errore durante l'aggiornamento: ${error.message}` });
    }

    if (!data) {
      throw createError({ statusCode: 404, statusMessage: 'Profilo staff non trovato.' });
    }

    return { status: 'success', message: 'Profilo aggiornato con successo!', data: data };
});


================================================
FILE: server/api/staff/admin-create.post.js
================================================
import { serverSupabaseUser } from '#supabase/server';
import { getSupabaseAdminClient } from '~/server/utils/supabaseAdmin';
import { extractSkillsFromText } from '~/server/utils/skillExtractor';
import { sendWelcomeInviteEmail } from '~/server/utils/emailSender';

export default defineEventHandler(async (event) => {
  const adminUser = await serverSupabaseUser(event);
  const supabaseAdmin = getSupabaseAdminClient();
  const config = useRuntimeConfig();

  if (!adminUser) {
    throw createError({ statusCode: 401, statusMessage: 'Unauthorized' });
  }
  
  const { data: adminStaff } = await supabaseAdmin.from('staff').select('role').eq('user_id', adminUser.id).single();
  if (adminStaff?.role !== 'admin') {
    throw createError({ statusCode: 403, statusMessage: 'Forbidden: Admin privileges required.' });
  }

  const { first_name, last_name, email, text_skills, role } = await readBody(event);
  if (!email || !first_name || !last_name || !role) {
    throw createError({ statusCode: 400, statusMessage: 'Dati incompleti.' });
  }

  const tempPassword = Math.random().toString(36).slice(-12);
  const { data: createData, error: createError } = await supabaseAdmin.auth.admin.createUser({
    email: email,
    password: tempPassword,
    email_confirm: true,
  });

  if (createError) {
    if (createError.message.includes('already registered') || createError.message.includes('already exists')) {
      throw createError({ statusCode: 409, statusMessage: `L'utente con email ${email} esiste giÃ .` });
    }
    console.error('CRITICAL: Error creating user:', createError);
    throw createError({ statusCode: 500, statusMessage: `Errore durante la creazione dell'utente: ${createError.message}` });
  }
  
  const newUser = createData.user;

  const skills = await extractSkillsFromText(text_skills);
  const { error: staffInsertError } = await supabaseAdmin.from('staff').insert({
    user_id: newUser.id,
    email: email,
    first_name,
    last_name,
    text_skills,
    skills,
    role,
  });

  if (staffInsertError) {
    await supabaseAdmin.auth.admin.deleteUser(newUser.id);
    throw createError({ statusCode: 500, statusMessage: `Errore creazione profilo staff: ${staffInsertError.message}` });
  }

  // Punta alla pagina /forgot-password per iniziare il flusso
  const resetPageLink = `${config.public.baseUrl}/forgot-password`;
  await sendWelcomeInviteEmail(email, first_name, resetPageLink);
  
  return { success: true, message: 'Utente creato con successo. VerrÃ  inviata un\'email con le istruzioni per impostare la password.' };
});


================================================
FILE: server/plugins/scheduler.js
================================================
// server/plugins/scheduler.js
import { Cron } from 'croner';
import { processNewIncomingEmails } from '../utils/mailProcessor';

export default defineNitroPlugin(async (nitroApp) => {
  // Aggiunto per debug: Controlla la variabile d'ambiente
  console.log('--- NITRO SERVER START ---');
  console.log('NODE_TLS_REJECT_UNAUTHORIZED (in Nitro):', process.env.NODE_TLS_REJECT_UNAUTHORIZED);
  console.log('--- END NITRO SERVER START ---');

  // Gestore globale per gli errori di Promise non catturati (unhandledRejection).
  process.on('unhandledRejection', (reason, promise) => {
    console.error('GLOBAL ERROR: Unhandled Rejection at Promise', promise, 'reason:', reason);
  });

  // Esegui la funzione di elaborazione email all'avvio del server Nitro.
  console.log('Initial email processing run on server start.');
  try {
    await processNewIncomingEmails();
  } catch (error) {
    console.error('Error during initial email processing run:', error);
  }

  // Programma l'esecuzione periodica della funzione di elaborazione email.
  console.log('Email processing scheduler started and scheduled to run every 5 minutes.');
  
  // *** MODIFICA QUI: Aggiungi "new" prima di Cron() e imposta a 5 minuti ***
  new Cron('*/5 * * * *', async () => { // Esegui ogni 5 minuti
    console.log('Running scheduled email processing (every 5 minutes)...');
    try {
      await processNewIncomingEmails();
    } catch (error) {
      console.error('Error during scheduled email processing run:', error);
    }
  }, { timezone: 'Europe/Rome' });


});


================================================
FILE: server/utils/aiService.js
================================================
// server/utils/aiService.js
import { useRuntimeConfig } from '#imports';
import { $fetch } from 'ofetch';
import { getSupabaseAdminClient } from './supabaseAdmin';

const config = useRuntimeConfig();
const GOOGLE_API_KEY = config.googleApiKey;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GOOGLE_API_KEY}`;

const PROMPT_EMAIL_TRIAGE = `
Sei un assistente AI super efficiente per uno studio di commercialisti. Il tuo compito ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ analizzare un'email in arrivo e assegnarla al membro dello staff piÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¹ appropriato.

Inoltre, devi determinare se l'email ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ URGENTE. Un'email ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ urgente se contiene parole come "urgente",  "ora", "subito", "immediato", "critico", "deadline", "scadenza", o se il contesto implica una richiesta che richiede attenzione immediata.

Infine, devi estrarre le informazioni di contatto del mittente come nome completo, numero di telefono e comune, se presenti nel corpo dell'email.

Ecco la lista del personale e delle loro responsabilitÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â . Ogni membro ha un ID unico (UUID).
--- LISTA PERSONALE ---
{staff_list}
-----------------------

Analizza il seguente contenuto dell'email (mittente, oggetto e corpo) e determina:
1.Se nella mail trovi un commento html con dentro un tag span, prendi il contenuto del tag span e usalo come clientid. Se non lo trovi, procedi coi punti sotto, altrimenti restituisci l'oggetto JSON con clientid, telefono e comune che trovi analizzando il corpo della mail. Se trovi tutto, restituisci e metti nell'oggetto un indice 'followUpDone' settato a 1, altrimenti metti 'followUpDone' a 2 se manca qualche campo.
2. Quale persona dello staff ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ il piÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¹ adatto a gestirla.
3. Se l'email ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ urgente.
4. Se il nome completo del mittente ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ presente.
5. Se il numero di telefono del mittente ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ presente.
6. Se il comune/cittÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â  del mittente ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ presente.

--- CONTENUTO EMAIL ---
Mittente: {email_from}
Oggetto: {email_subject}
Corpo: {email_body}
-----------------------

La tua risposta DEVE essere un oggetto JSON con il seguente formato, senza alcun testo aggiuntivo:
{
  "assigned_to_staff_id": "L'UUID ESATTO del dipendente scelto dalla LISTA PERSONALE sopra. Non inventare o alterare gli UUID. Se NESSUNO nella lista sembra appropriato o non sei sicuro, DEVI restituire null.",
  "ai_confidence_score": un numero da 0.0 (per niente sicuro) a 1.0 (molto sicuro),
  "ai_reasoning": "Una breve frase che spiega perchÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â© hai scelto quel dipendente/ufficio e se l'email ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ considerata urgente.",
  "is_urgent": true/false, // Indica se l'email ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¨ urgente in base al contenuto.
  "client_name": "Il nome completo del mittente estratto dal corpo dell'email, se presente. Restituisci null se non trovato.", // NUOVO
  "client_phone_number": "Il numero di telefono estratto dal corpo dell'email, se presente. Restituisci null se non trovato.",
  "client_city": "Il comune o la cittÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â  estratti dal corpo dell'email, se presenti. Restituisci null se non trovato."
}
`;

// --- PROMPT CORRETTA E SPECIFICA PER L'ESTRAZIONE ---
const PROMPT_INFOS_EXTRACTION =`
Sei un assistente AI il cui unico compito ÃƒÂ¨ estrarre informazioni di contatto da un testo.
Analizza il seguente corpo dell'email e estrai nome, numero di telefono e comune/cittÃƒÂ  del mittente.

--- CORPO EMAIL ---
{email_body}
--------------------

La tua risposta DEVE essere un oggetto JSON con il seguente formato, senza alcun testo aggiuntivo:
{
  "client_name": "Il nome completo del mittente se trovato, altrimenti null.",
  "client_phone_number": "Il numero di telefono se trovato, altrimenti null.",
  "client_city": "Il comune o la cittÃƒÂ  se trovati, altrimenti null."
}
`;

/**
 * NUOVA FUNZIONE: Estrae solo le informazioni del cliente da un'email.
 * PiÃƒÂ¹ leggera ed economica, da usare per le risposte ai follow-up.
 * @param {string} body_text - Il corpo dell'email da analizzare.
 * @returns {Promise<object>} Un oggetto con { client_name, client_phone_number, client_city }.
 */
export async function extractClientInfoWithAI(body_text) {
    const finalPrompt = PROMPT_INFOS_EXTRACTION.replace('{email_body}', body_text ? body_text.substring(0, 4000) : 'No body text provided');
    const defaultResponse = { client_name: null, client_phone_number: null, client_city: null };

    try {
        console.log('AI_SERVICE (Info Extraction): Sending request to Gemini...');
        const response = await $fetch.raw(GEMINI_API_URL, {
            method: 'POST',
            body: { contents: [{ parts: [{ text: finalPrompt }] }] },
            headers: { 'Content-Type': 'application/json' },
        });

        const responseData = response._data;
        const rawResponseText = responseData.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!rawResponseText) {
            console.error('AI_SERVICE (Info Extraction): Gemini did not return valid text content.');
            return defaultResponse;
        }
        
        console.log('AI_SERVICE (Info Extraction): Raw text response from Gemini:', rawResponseText);

        const jsonMatch = rawResponseText.match(/```(?:json)?\s*([\s\S]*?)\s*```/);
        let jsonString = jsonMatch ? jsonMatch[1].trim() : rawResponseText.trim();
        
        const extractedData = JSON.parse(jsonString);
        console.log('AI_SERVICE (Info Extraction): Parsed AI response JSON:', extractedData);

        return {
            client_name: extractedData.client_name || null,
            client_phone_number: extractedData.client_phone_number || null,
            client_city: extractedData.client_city || null,
        };

    } catch (e) {
        console.error("AI_SERVICE (Info Extraction): Error calling Gemini API or parsing JSON:", e.message);
        return defaultResponse; // Restituisce un oggetto vuoto in caso di errore
    }
}


export async function analyzeEmailWithAI(sender, subject, body_text) {
    const supabaseAdmin = getSupabaseAdminClient();
    
    // --- FIX #1: Seleziona i campi 'first_name' e 'last_name' invece di 'name' ---
    const { data: staff, error: staffError } = await supabaseAdmin.from('staff').select('id, first_name, last_name, text_skills, skills, email');
    
    if (staffError) {
        console.error('AI_SERVICE: Error fetching staff for AI:', staffError.message);
        throw new Error('Impossibile caricare il personale per l\'analisi AI.');
    }
    if (!staff || staff.length === 0) {
        console.warn('AI_SERVICE: Nessun personale configurato nel database per l\'analisi AI.');
        return {
            assigned_to_staff_id: null,
            ai_confidence_score: 0.1,
            ai_reasoning: "Nessun personale configurato per l'assegnazione.",
            assignedStaffEmail: null,
            assignedStaffName: null,
            is_urgent: false, 
            client_name: null,
            client_phone_number: null,
            client_city: null,
        };
    }

    const staffListForPrompt = staff.map(s => {
      const skillsDescription = s.skills && s.skills.length > 0
        ? `Competenze: ${s.skills.join(', ')}`
        : `Descrizione: ${s.text_skills}`;
      
      // --- FIX #2: Usa 'first_name' e 'last_name' per costruire il nome completo ---
      return `ID: ${s.id}, Nome: ${s.first_name} ${s.last_name}, ${skillsDescription}, Email: ${s.email}`;
    }).join('\n');

    const finalPrompt = PROMPT_EMAIL_TRIAGE
        .replace('{staff_list}', staffListForPrompt)
        .replace('{email_from}', sender)
        .replace('{email_subject}', subject)
        .replace('{email_body}', body_text ? body_text.substring(0, 4000) : 'No body text provided');

    let aiResponse;
    try {
        console.log('AI_SERVICE: Sending request to Gemini...');
        const response = await $fetch.raw(GEMINI_API_URL, {
            method: 'POST',
            body: { contents: [{ parts: [{ text: finalPrompt }] }] },
            headers: { 'Content-Type': 'application/json' },
        });
        const responseData = response._data;
        const rawResponseText = responseData.candidates?.[0]?.content?.parts?.[0]?.text;
        console.log('AI_SERVICE: Gemini response received:', rawResponseText);
        if (!rawResponseText) {
            console.error('AI_SERVICE: Gemini did not return valid text content.');
            throw new Error('Risposta non valida o malformata da Gemini: contenuto testuale mancante.');
        }

        console.log('AI_SERVICE: Raw text response from Gemini (partial):', rawResponseText.substring(0, Math.min(rawResponseText.length, 500)) + '...');

        const jsonMatch = rawResponseText.match(/```(?:json)?\s*([\s\S]*?)\s*```/);
        let jsonString = '';
        if (jsonMatch && jsonMatch[1]) {
            jsonString = jsonMatch[1].trim();
            console.log('AI_SERVICE: JSON block extracted via regex.');
        } else {
            console.warn('AI_SERVICE: No markdown JSON block found. Attempting to parse entire response as JSON.');
            jsonString = rawResponseText.trim();
        }

        try {
            aiResponse = JSON.parse(jsonString);
            console.log('AI_SERVICE: Parsed AI response JSON:', JSON.stringify(aiResponse));
            console.log(`AI_SERVICE: Extracted client data - Name: ${aiResponse.client_name}, Phone: ${aiResponse.client_phone_number}, City: ${aiResponse.client_city}`);
        } catch (parseError) {
            console.error('AI_SERVICE: Error parsing JSON from Gemini:', parseError);
            console.error('AI_SERVICE: Malformed JSON string received:', jsonString);
            throw new Error(`Risposta AI malformata: ${parseError.message}`);
        }

    } catch (e) {
        console.error("AI_SERVICE: Error calling Gemini API:", e.message);
        throw new Error(`Errore durante l'analisi AI dell'email: ${e.message}`);
    }

    const bestMatchStaff = staff.find(s => s.id === aiResponse.assigned_to_staff_id);
    const finalAssignedId = bestMatchStaff ? aiResponse.assigned_to_staff_id : null;

    const isUrgent = typeof aiResponse.is_urgent === 'boolean' ? aiResponse.is_urgent : false;
    const clientName = aiResponse.client_name && String(aiResponse.client_name).trim() !== '' ? String(aiResponse.client_name).trim() : null;
    const clientPhoneNumber = aiResponse.client_phone_number && String(aiResponse.client_phone_number).trim() !== '' ? String(aiResponse.client_phone_number).trim() : null;
    const clientCity = aiResponse.client_city && String(aiResponse.client_city).trim() !== '' ? String(aiResponse.client_city).trim() : null;

    // --- FIX #3: Costruisci il nome completo per il risultato finale ---
    const assignedStaffName = bestMatchStaff ? `${bestMatchStaff.first_name} ${bestMatchStaff.last_name}` : null;
   
    console.log('AI_SERVICE: Final AI Result being returned:', {
        assigned_to_staff_id: finalAssignedId,
        ai_confidence_score: parseFloat(aiResponse.ai_confidence_score) || 0,
        ai_reasoning: aiResponse.ai_reasoning,
        assignedStaffEmail: bestMatchStaff?.email || null,
        assignedStaffName: assignedStaffName,
        is_urgent: isUrgent,
        client_name: clientName,
        client_phone_number: clientPhoneNumber,
        client_city: clientCity,
    });

    return {
        assigned_to_staff_id: finalAssignedId,
        ai_confidence_score: parseFloat(aiResponse.ai_confidence_score) || 0,
        ai_reasoning: aiResponse.ai_reasoning,
        assignedStaffEmail: bestMatchStaff?.email || null,
        assignedStaffName: assignedStaffName,
        is_urgent: isUrgent,
        client_name: clientName,
        client_phone_number: clientPhoneNumber,
        client_city: clientCity,
    };
}


================================================
FILE: server/utils/clientManager.js
================================================
// server/utils/clientManager.js
import { getSupabaseAdminClient } from './supabaseAdmin';

/**
 * Gestisce l'upsert (insert o update) di un record cliente in modo robusto.
 * Se un cliente con l'email esiste, unisce i nuovi dati con quelli esistenti.
 * Resetta il flag 'follow_up_email_sent' se i dati vengono completati.
 *
 * @param {string} email L'email del cliente (obbligatoria).
 * @param {string|null} clientName Il nome del cliente estratto.
 * @param {string|null} phoneNumber Il numero di telefono estratto.
 * @param {string|null} city Il comune/cittÃ  estratto.
 * @param {string} emailId L'ID dell'email che ha triggerato l'upsert.
 * @returns {Promise<object>} Il record cliente aggiornato o appena creato.
 */
// In server/utils/clientManager.js

/**
 * Gestisce l'upsert (insert o update) di un record cliente in modo robusto.
 * Se un cliente con l'email esiste, unisce i nuovi dati con quelli esistenti.
 * Resetta il flag 'follow_up_email_sent' se i dati vengono completati.
 *
 * @param {string} email L'email del cliente (obbligatoria).
 * @param {string|null} clientName Il nome del cliente estratto.
 * @param {string|null} phoneNumber Il numero di telefono estratto.
 * @param {string|null} city Il comune/cittÃ  estratto.
 * @param {string} emailId L'ID dell'email che ha triggerato l'upsert.
 * @returns {Promise<object>} Il record cliente aggiornato o appena creato.
 */
// in server/utils/clientManager.js
export async function upsertClient(email, clientName, phoneNumber, city, emailId) {
    const supabaseAdmin = getSupabaseAdminClient();
    console.log(`CLIENT_MANAGER: Upserting client for email: ${email}`);
    
    try {
        const { data: existingClient, error: fetchError } = await supabaseAdmin
            .from('clients').select('*').eq('email', email).single();

        if (fetchError && fetchError.code !== 'PGRST116') throw new Error(`Failed to fetch client: ${fetchError.message}`);

        if (existingClient) {
            const updatePayload = {};
            if (clientName && clientName !== existingClient.name) updatePayload.name = clientName;
            if (phoneNumber && phoneNumber !== existingClient.phone_number) updatePayload.phone_number = phoneNumber;
            if (city && city !== existingClient.city) updatePayload.city = city;
            
            // --- MODIFICA QUI: Aggiorna last_email_id solo se fornito ---
            if (emailId) {
                updatePayload.last_email_id = emailId;
            }

            const isNowComplete = (updatePayload.name || existingClient.name) && (updatePayload.phone_number || existingClient.phone_number) && (updatePayload.city || existingClient.city);
            if (isNowComplete && existingClient.follow_up_email_sent) {
                updatePayload.follow_up_email_sent = false;
                updatePayload.follow_up_sent_at = null;
                updatePayload.follow_up_message_id = null;
            }
            
            if (Object.keys(updatePayload).length > 0) {
                const { data, error } = await supabaseAdmin.from('clients').update(updatePayload).eq('id', existingClient.id).select().single();
                if (error) throw new Error(`Failed to update client: ${error.message}`);
                return data;
            }
            return existingClient;

        } else {
            const clientDataToSave = {
                email: email, name: clientName, phone_number: phoneNumber,
                city: city, last_email_id: emailId, follow_up_email_sent: false,
            };
            const { data, error } = await supabaseAdmin.from('clients').insert([clientDataToSave]).select().single();
            if (error) throw new Error(`Failed to insert new client: ${error.message}`);
            return data;
        }

    } catch (e) {
        console.error('CLIENT_MANAGER: Unhandled error in upsertClient:', e);
        throw e;
    }
}

/**
 * Recupera un record cliente tramite email.
 * @param {string} email
 * @returns {Promise<object|null>} Il record cliente o null se non trovato.
 */
export async function getClient(email) {
    const supabaseAdmin = getSupabaseAdminClient();
    try {
        const { data, error } = await supabaseAdmin
            .from('clients')
            .select('*')
            .eq('email', email)
            .single();
        if (error && error.code !== 'PGRST116') {
            console.error('CLIENT_MANAGER: Error getting client:', error.message);
            throw new Error(`Failed to get client: ${error.message}`);
        }
        return data;
    } catch (e) {
        console.error('CLIENT_MANAGER: Unhandled error in getClient:', e);
        throw e;
    }
}

export async function getClientByFollowUpMessageId(messageId) {
    const supabaseAdmin = getSupabaseAdminClient();
    try {
        const { data, error } = await supabaseAdmin
            .from('clients')
            .select('*')
            .eq('follow_up_message_id', messageId)
            .single();
        if (error && error.code !== 'PGRST116') {
            console.error('CLIENT_MANAGER: Error getting client by follow_up_message_id:', error.message);
            throw new Error(`Failed to get client by follow_up_message_id: ${error.message}`);
        }
        return data;
    } catch (e) {
        console.error('CLIENT_MANAGER: Unhandled error in getClientByFollowUpMessageId:', e);
        throw e;
    }
}


================================================
FILE: server/utils/emailSender.js
================================================
// server/utils/emailSender.js
import sgMail from '@sendgrid/mail';
import { useRuntimeConfig } from '#imports';

/**
 * Inoltra un'email analizzata a un membro dello staff, includendo un link per rispondere dall'app.
 * @param {string} to - L'email del membro dello staff.
 * @param {string} fromName - Il nome del mittente originale.
 * @param {string} fromAddress - L'email del mittente originale.
 * @param {string} subject - L'oggetto dell'email originale.
 * @param {string} originalBody - Il corpo dell'email originale.
 * @param {string} aiReasoning - La motivazione fornita dall'AI.
 * @param {Array} attachments - Eventuali allegati da inoltrare.
 * @param {string} emailId - L'UUID dell'email salvata nel database, usato per creare il link.
 */
export async function sendEmail(to, fromName, fromAddress, subject, originalBody, aiReasoning, attachments = [], emailId) {
  const config = useRuntimeConfig();
  const SENDER_EMAIL = config.senderEmail;
  const APP_BASE_URL = config.public.baseUrl; // Recupera l'URL base dell'app dalla configurazione

  sgMail.setApiKey(config.sendgridApiKey);

  // Costruisce il link dinamico che porta direttamente alla conversazione nell'app
  const conversationLink = `${APP_BASE_URL}/?email_id=${emailId}`;

  const htmlBody = `
    <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; border: 1px solid #e2e8f0; padding: 24px; border-radius: 8px; max-width: 600px; margin: auto; background-color: #ffffff; color: #1a202c;">
      <p style="background-color: #f1f5f9; padding: 12px; border-radius: 6px; border-left: 4px solid #4f46e5; margin: 0 0 24px 0;">
        <strong>Motivazione AI:</strong> <em>${aiReasoning}</em>
      </p>

      <!-- BOTTONE PER RISPONDERE DALL'APP -->
      <div style="text-align: center; margin: 24px 0;">
        <a href="${conversationLink}" target="_blank" style="background-color: #4f46e5; color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; font-weight: 600; display: inline-block; font-size: 16px;">
          Apri e Rispondi dall'App
        </a>
      </div>

      <hr style="border: none; border-top: 1px solid #e2e8f0; margin: 24px 0;">
      
      <h3 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Email Originale</h3>
      <p style="margin: 4px 0;"><strong>Da:</strong> ${fromName} <${fromAddress}></p>
      <p style="margin: 4px 0;"><strong>Oggetto:</strong> ${subject}</p>
      
      <div style="border: 1px solid #e2e8f0; padding: 16px; margin-top: 16px; border-radius: 6px; background-color: #f8fafc;">
        <pre style="white-space: pre-wrap; font-family: inherit; font-size: 14px; color: #475569; margin: 0;">${originalBody}</pre>
      </div>
    </div>
  `;

  const msg = {
    to: to,
    from: SENDER_EMAIL,
    subject: `[Smistato da AI] ${subject}`,
    html: htmlBody,
    replyTo: fromAddress,
    attachments: attachments
  };

  try {
    await sgMail.send(msg);
    console.log(`Email inoltrata con successo a ${to} con link di risposta.`);
  } catch (error) {
    console.error("Errore durante l'inoltro con SendGrid:", error.response?.body || error.message);
    throw error;
  }
}

/**
 * Invia un'email di follow-up per richiedere informazioni mancanti.
 */
export async function sendFollowUpRequest(toEmail, clientName, missingInfoDescription, clientId, originalMessageId = null, originalSubject = 'la sua richiesta') {
  const config = useRuntimeConfig();
  const SENDER_EMAIL = config.senderEmail;
  sgMail.setApiKey(config.sendgridApiKey);
  
  const subject = `Re: ${originalSubject}`;
  
  const htmlBody = `
      <div style="font-family: sans-serif; font-size: 14px; color: #333;">
        <p>Gentile ${clientName || 'Cliente'},</p>
        <p>In riferimento alla sua email riguardo "${originalSubject}", la ringraziamo per averci contattato.</p>
        <p>${missingInfoDescription}</p>
        <p>La preghiamo di rispondere direttamente a questa email fornendoci i dati richiesti.</p>
        <p>Grazie per la sua collaborazione.</p>
        <p>Cordiali saluti,<br/>Il team dello Studio Commercialista</p>
        <!-- ID Cliente: ${clientId} -->
      </div>
    `;

    const msg = {
        to: toEmail,
        from: {
            name: 'Studio Commercialista',
            email: SENDER_EMAIL,
        },
        subject: subject,
        html: htmlBody,
        headers: {}
    };

    if (originalMessageId) {
        const cleanMessageId = originalMessageId.replace(/<|>/g, '');
        msg.headers['In-Reply-To'] = `<${cleanMessageId}>`;
        msg.headers['References'] = `<${cleanMessageId}>`;
    }

    try {
        const response = await sgMail.send(msg);
        console.log(`EMAIL_SENDER: Follow-up email sent successfully to ${toEmail}.`);
        const messageId = response[0]?.headers['x-message-id'];
        return { messageId: messageId || `local-${Date.now()}`, subject: subject, body: htmlBody };
    } catch (error) {
        console.error("EMAIL_SENDER: Error sending follow-up email with SendGrid:", error.response?.body || error.message);
        throw error;
    }
}


/**
 * Invia un'email di benvenuto che invita l'utente ad andare sulla pagina di reset password.
 * @param {string} toEmail - L'email del nuovo membro dello staff.
 * @param {string} firstName - Il nome del nuovo membro dello staff.
 * @param {string} resetPageLink - Il link alla pagina /reset-password.
 */
export async function sendWelcomeInviteEmail(toEmail, firstName, resetPageLink) {
  const config = useRuntimeConfig();
  const SENDER_EMAIL = config.senderEmail;
  sgMail.setApiKey(config.sendgridApiKey);

  const subject = `Benvenuto nel team, ${firstName}! Imposta il tuo account.`;
  const htmlBody = `
    <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; border: 1px solid #e2e8f0; padding: 24px; border-radius: 8px; max-width: 600px; margin: auto; background-color: #ffffff; color: #1a202c;">
      <h2 style="font-size: 20px; font-weight: 600; margin: 0 0 16px 0;">Benvenuto a bordo, ${firstName}!</h2>
      <p>Il tuo account Ã¨ stato creato sulla nostra piattaforma di gestione email.</p>
      <p>Per completare la configurazione e accedere, devi impostare una password. Clicca sul pulsante qui sotto per andare alla pagina di impostazione password, dove dovrai inserire la tua email per ricevere un link sicuro.</p>
      <div style="text-align: center; margin: 24px 0;">
        <a href="${resetPageLink}" target="_blank" style="background-color: #4f46e5; color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; font-weight: 600; display: inline-block; font-size: 16px;">
          Imposta la tua Password
        </a>
      </div>
      <p style="font-size: 12px; color: #64748b; text-align: center;">Questo pulsante ti porterÃ  alla pagina dove potrai richiedere il link per creare la tua password.</p>
    </div>
  `;

  const msg = {
    to: toEmail,
    from: {
      name: 'Admin - Piattaforma Gestione Email',
      email: SENDER_EMAIL
    },
    subject: subject,
    html: htmlBody,
  };

  try {
    await sgMail.send(msg);
    console.log(`Email di invito (step 1) inviata con successo a ${toEmail}.`);
  } catch (error) {
    console.error("Errore invio email di invito:", error.response?.body || error.message);
    // Non rilanciare l'errore per non bloccare la risposta all'admin, ma loggalo.
  }
}


================================================
FILE: server/utils/imapClient.js
================================================
// server/utils/imapClient.js
import Imap from 'node-imap';
import { simpleParser } from 'mailparser';

export function fetchNewEmails(config) {
  return new Promise((resolve, reject) => {
    let imap;
    try {
      imap = new Imap({
        user: config.imapUsername,
        password: config.imapPassword,
        host: config.imapHost,
        port: config.imapPort,
        tls: true,
        tlsOptions: { rejectUnauthorized: false },
      });
    } catch (e) {
      return reject(e);
    }

    const gracefulEnd = (result) => {
      if (imap.state !== 'disconnected') {
        imap.end();
      }
      if (result instanceof Error) {
        reject(result);
      } else {
        resolve(result);
      }
    };
    
    imap.once('error', (err) => {
      console.error('IMAP: Global connection error:', err);
      // Non rigettare qui, lascia che 'end' gestisca la chiusura.
    });

    imap.once('end', () => {
      console.log('IMAP: Connection ended.');
    });

    imap.once('ready', () => {
      imap.openBox(config.imapMailbox, false, (err, box) => {
        if (err) return gracefulEnd(err);
        
        imap.search(['UNSEEN'], (err, uids) => {
          if (err) return gracefulEnd(err);

          if (!uids || uids.length === 0) {
            console.log('IMAP: No new unseen emails.');
            return gracefulEnd([]);
          }

          console.log(`IMAP: Found ${uids.length} unseen emails.`);
          const f = imap.fetch(uids, { bodies: '' });
          const emails = [];

          f.on('message', (msg, seqno) => {
            const emailData = { uid: uids[seqno - 1], buffer: '' };
            msg.on('body', (stream) => {
              stream.on('data', (chunk) => { emailData.buffer += chunk.toString('utf8'); });
            });
            msg.once('end', () => {
              emails.push(emailData);
            });
          });

          f.once('error', (fetchErr) => {
            console.error('IMAP: Fetch error:', fetchErr);
            return gracefulEnd(fetchErr);
          });

          f.once('end', async () => {
            console.log('IMAP: Finished fetching. Parsing emails...');
            const parsedEmails = [];
            for (const email of emails) {
                try {
                    const parsed = await simpleParser(email.buffer);
                    parsedEmails.push({ ...parsed, uid: email.uid });
                } catch(e) {
                    console.error('IMAP: Error parsing one email:', e.message);
                }
            }

            const uidsToMark = parsedEmails.map(e => e.uid);
            if (uidsToMark.length > 0) {
                imap.addFlags(uidsToMark, ['\\Seen'], (flagErr) => {
                    if (flagErr) console.error('IMAP: Error marking emails as seen:', flagErr);
                    return gracefulEnd(parsedEmails);
                });
            } else {
                return gracefulEnd([]);
            }
          });
        });
      });
    });

    imap.connect();
  });
}


================================================
FILE: server/utils/mailProcessor.js
================================================
// server/utils/mailProcessor.js
import { fetchNewEmails } from './imapClient';
import { analyzeEmailWithAI, extractClientInfoWithAI } from './aiService';
import { sendEmail, sendFollowUpRequest } from './emailSender';
import { getSupabaseAdminClient } from './supabaseAdmin';
import { upsertClient, getClient } from './clientManager';

const MAX_FOLLOW_UP_RETRIES = 2;

export async function processNewIncomingEmails() {
  console.log('MAIL_PROCESSOR: Starting email processing cycle...');
  const config = useRuntimeConfig();
  const supabaseAdmin = getSupabaseAdminClient();

  try {
    const incomingRawEmails = await fetchNewEmails(config);
    console.log(`MAIL_PROCESSOR: Fetched ${incomingRawEmails.length} new emails from IMAP.`);

    for (const email of incomingRawEmails) {
      console.log(`\n--- MAIL_PROCESSOR: Processing email from "${email.from}" with subject: "${email.subject}" ---`);
      
      try {
        const clientEmailFromHeader = email.from.match(/<(.+)>/)?.[1] || email.from;
        const client = await getClient(clientEmailFromHeader);
        const isFollowUpReply = client && client.follow_up_email_sent === true;

        if (isFollowUpReply) {
            console.log(`MAIL_PROCESSOR: Handling as a follow-up reply for ${client.email}.`);
            
            const replyOnlyText = (email.text || "").split(/\n>|On .* wrote:|Il giorno .* ha scritto:/)[0].trim();
            const extractedInfo = await extractClientInfoWithAI(replyOnlyText);
            const updatedClient = await upsertClient(client.email, extractedInfo.client_name, extractedInfo.client_phone_number, extractedInfo.client_city, null);

            const stillMissingInfo = !updatedClient.name || !updatedClient.phone_number || !updatedClient.city;
            const retries = updatedClient.follow_up_retries || 0;

            if (stillMissingInfo && retries < MAX_FOLLOW_UP_RETRIES) {
                console.log(`MAIL_PROCESSOR: Client ${client.email} replied but info is still missing. Sending another follow-up.`);
                
                let missingFields = [];
                if (!updatedClient.name) missingFields.push("il suo nome completo");
                if (!updatedClient.phone_number) missingFields.push("il suo numero di telefono");
                if (!updatedClient.city) missingFields.push("il suo comune/cittÃ ");
                const missingInfoDescription = `La ringraziamo per la sua risposta. Per procedere, ci mancano ancora: ${missingFields.join(', ')}.`;

                const sentEmailDetails = await sendFollowUpRequest(clientEmailFromHeader, updatedClient.name || 'Cliente', missingInfoDescription, updatedClient.id, email.messageId, email.subject);
                
                await supabaseAdmin.from('clients').update({
                    follow_up_email_sent: true,
                    follow_up_sent_at: new Date().toISOString(),
                    follow_up_message_id: sentEmailDetails.messageId,
                    follow_up_retries: retries + 1
                }).eq('id', updatedClient.id);
                console.log(`MAIL_PROCESSOR: Follow-up retry #${retries + 1} sent to ${clientEmailFromHeader}.`);
            }
            
            continue; 
        }

        // --- PERCORSO PER NUOVE EMAIL ---
        console.log(`MAIL_PROCESSOR: Handling as a new email. Saving to DB...`);
        
        const { data: savedEmail, error: saveEmailError } = await supabaseAdmin.from('incoming_emails').insert([{
            sender: email.from,
            subject: email.subject,
            body_text: email.text,
            body_html: email.html,
            status: 'new', is_urgent: false, reference: email.messageId
        }]).select().single();

        if (saveEmailError) throw new Error(`Supabase save email error: ${saveEmailError.message}`);
        const emailRecordId = savedEmail.id;
        console.log(`MAIL_PROCESSOR: New email saved to DB with ID: ${emailRecordId}`);

        if (email.attachments && email.attachments.length > 0) {
            for (const attachment of email.attachments) {
                if (!attachment.content || !(attachment.content instanceof Buffer) || attachment.content.length === 0) continue;
                try {
                    const storagePath = `${emailRecordId}/${Date.now()}_${attachment.filename}`;
                    const { data: uploadData, error: uploadError } = await supabaseAdmin.storage
                        .from('email-attachments').upload(storagePath, attachment.content, { contentType: attachment.contentType });
                    if (uploadError) throw uploadError;
                    const { data: { publicUrl } } = supabaseAdmin.storage.from('email-attachments').getPublicUrl(uploadData.path);
                    await supabaseAdmin.from('email-attachments').insert({
                        email_id: emailRecordId,
                        filename: attachment.filename || 'no-filename',
                        mimetype: attachment.contentType || 'application/octet-stream',
                        size: attachment.size || 0,
                        storage_path: storagePath,
                        public_url: publicUrl
                    });
                } catch (attachError) {
                    console.error(`MAIL_PROCESSOR: Error processing attachment:`, attachError.message);
                }
            }
        }

        const aiResult = await analyzeEmailWithAI(email.from, email.subject, email.text || email.html);
        const clientNameFromEmail = email.from.replace(/<.+>/, '').trim().replace(/"/g, '') || null;
        const updatedClient = await upsertClient(
            clientEmailFromHeader, aiResult.client_name || clientNameFromEmail,
            aiResult.client_phone_number, aiResult.client_city, emailRecordId
        );

        const hasMissingInfo = !updatedClient.name || !updatedClient.phone_number || !updatedClient.city;
        if (hasMissingInfo && !updatedClient.follow_up_email_sent) {
            console.log(`MAIL_PROCESSOR: New client has missing info. Sending first follow-up.`);
            
            let missingFields = [];
            if (!updatedClient.name) missingFields.push("nome completo");
            if (!updatedClient.phone_number) missingFields.push("numero di telefono");
            if (!updatedClient.city) missingFields.push("comune/cittÃ ");
            const missingInfoDescription = `Per poterla assistere al meglio, la preghiamo di fornirci: ${missingFields.join(', ')}.`;
            
            const sentEmailDetails = await sendFollowUpRequest(clientEmailFromHeader, updatedClient.name || 'Cliente', missingInfoDescription, updatedClient.id, email.messageId, email.subject);
            
            await supabaseAdmin.from('clients').update({
                follow_up_email_sent: true,
                follow_up_sent_at: new Date().toISOString(),
                follow_up_message_id: sentEmailDetails.messageId,
                follow_up_retries: 1
            }).eq('id', updatedClient.id);
        }

        const newStatus = aiResult.assigned_to_staff_id ? 'analyzed' : 'manual_review';
        await supabaseAdmin.from('incoming_emails').update({
            assigned_to_staff_id: aiResult.assigned_to_staff_id,
            ai_confidence_score: aiResult.ai_confidence_score,
            ai_reasoning: aiResult.ai_reasoning,
            status: newStatus,
            is_urgent: aiResult.is_urgent,
        }).eq('id', emailRecordId);
        
        if (aiResult.assigned_to_staff_id && aiResult.assignedStaffEmail) {
            console.log(`MAIL_PROCESSOR: Preparing to forward email to ${aiResult.assignedStaffEmail}...`);
            
            const sendgridAttachments = [];
            const { data: attachmentsToForward } = await supabaseAdmin
                .from('email-attachments').select('filename, mimetype, storage_path').eq('email_id', emailRecordId);
            
            if (attachmentsToForward && attachmentsToForward.length > 0) {
                for (const attachMeta of attachmentsToForward) {
                    try {
                        const { data: downloadedBlob, error: downloadError } = await supabaseAdmin.storage
                            .from('email-attachments').download(attachMeta.storage_path);
                        if (downloadError) throw downloadError;
                        
                        const bufferContent = Buffer.from(await downloadedBlob.arrayBuffer());
                        sendgridAttachments.push({
                            content: bufferContent.toString('base64'),
                            filename: attachMeta.filename,
                            type: attachMeta.mimetype,
                            disposition: 'attachment',
                        });
                    } catch (prepError) {
                        console.error(`MAIL_PROCESSOR: ERROR preparing attachment for forwarding:`, prepError.message);
                    }
                }
            }

            await sendEmail(
                aiResult.assignedStaffEmail,
                clientNameFromEmail || clientEmailFromHeader,
                clientEmailFromHeader,
                email.subject,
                email.text || email.html,
                aiResult.ai_reasoning,
                sendgridAttachments,
                emailRecordId
            );
            await supabaseAdmin.from('incoming_emails').update({ status: 'forwarded' }).eq('id', emailRecordId);
        }

      } catch (innerError) {
        console.error(`MAIL_PROCESSOR: Critical ERROR processing single email:`, innerError.message, innerError.stack);
      }
    }
  } catch (globalError) {
    console.error('MAIL_PROCESSOR: Global ERROR during email processing cycle:', globalError);
  }
  console.log('MAIL_PROCESSOR: Email processing cycle finished.');
} 


================================================
FILE: server/utils/skillExtractor.js
================================================
// server/utils/skillExtractor.js
import { useRuntimeConfig } from '#imports';
import { $fetch } from 'ofetch';

const config = useRuntimeConfig();
const GOOGLE_API_KEY = config.googleApiKey;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GOOGLE_API_KEY}`;

const PROMPT_SKILL_EXTRACTION = `
Sei un assistente AI specializzato nell'estrazione di competenze da una descrizione testuale.
Data la seguente descrizione di un dipendente/ufficio, estrai le singole competenze e restituiscile come un array JSON di stringhe.
Non includere nessun altro testo oltre all'array JSON.

Esempio di input: "Gestisce la contabilitÃƒÂ  generale, la fatturazione, e si occupa delle dichiarazioni fiscali. Conosce bene Excel e SAP."
Esempio di output: ["contabilitÃƒÂ  generale", "fatturazione", "dichiarazioni fiscali", "Excel", "SAP"]

Testo da analizzare:
"""
{text_skills_description}
"""
`;

export async function extractSkillsFromText(text_skills_description) {
  console.log("SKILL_EXTRACTOR: Inizio estrazione skills per:", text_skills_description ? text_skills_description.substring(0, Math.min(text_skills_description.length, 50)) + '...' : 'testo vuoto');

  if (!text_skills_description || text_skills_description.trim() === '') {
    console.warn("SKILL_EXTRACTOR: Testo competenze vuoto. Ritorno array vuoto.");
    return [];
  }

  const finalPrompt = PROMPT_SKILL_EXTRACTION.replace('{text_skills_description}', text_skills_description.trim());
  console.log("SKILL_EXTRACTOR: Prompt finale per Gemini (parziale):", finalPrompt.substring(0, Math.min(finalPrompt.length, 200)) + '...');

  try {
    const response = await $fetch.raw(GEMINI_API_URL, {
      method: 'POST',
      body: { contents: [{ parts: [{ text: finalPrompt }] }] },
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    const responseData = response._data;
    const rawResponseText = responseData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!rawResponseText) {
      console.warn("SKILL_EXTRACTOR: Gemini non ha restituito contenuto testuale valido nel campo atteso.");
      return [];
    }
    
    console.log("SKILL_EXTRACTOR: Risposta testuale raw da Gemini (parziale):", rawResponseText.substring(0, Math.min(rawResponseText.length, 500)) + '...');

    // MIGLIORAMENTO CHIAVE: Tentativo di estrazione del blocco JSON usando regex piÃƒÂ¹ robusta
    const jsonMatch = rawResponseText.match(/```(?:json)?\s*([\s\S]*?)\s*```/); // Cattura anche senza 'json' dopo i backticks
    let jsonString = '';
    if (jsonMatch && jsonMatch[1]) {
        jsonString = jsonMatch[1].trim();
        console.log("SKILL_EXTRACTOR: Blocco JSON markdown trovato e estratto.");
    } else {
        // Fallback: se non trova il blocco ```...```, prova a parsare l'intera risposta
        console.warn("SKILL_EXTRACTOR: Blocco JSON markdown non trovato. Tentativo di parsing dell'intera risposta come JSON.");
        jsonString = rawResponseText.trim();
    }

    console.log("SKILL_EXTRACTOR: JSON grezzo (probabile) estratto per parsing:", jsonString.substring(0, Math.min(jsonString.length, 200)) + '...');

    let skillsArray = [];
    try {
        skillsArray = JSON.parse(jsonString);
    } catch (parseError) {
        console.error("SKILL_EXTRACTOR: Errore nel parsing JSON:", parseError);
        console.error("SKILL_EXTRACTOR: Stringa JSON malformata ricevuta:", jsonString);
        return []; // Restituisce array vuoto in caso di JSON invalido
    }

    if (!Array.isArray(skillsArray)) {
        console.warn("SKILL_EXTRACTOR: L'AI ha restituito un non-array per le skills dopo il parsing. Ritorno array vuoto.");
        return [];
    }

    const cleanedSkills = skillsArray.map(skill => String(skill).trim()).filter(skill => skill.length > 0);
    console.log("SKILL_EXTRACTOR: Skills estratte e pulite (Final):", cleanedSkills);
    return cleanedSkills;

  } catch (e) {
    console.error("SKILL_EXTRACTOR: Errore durante la chiamata Gemini per l'estrazione delle skills:", e);
    // In caso di errore AI/rete, restituisci un array vuoto per non bloccare l'operazione
    return []; 
  }
}


================================================
FILE: server/utils/supabaseAdmin.js
================================================
// server/utils/supabaseAdmin.js
import { createClient } from '@supabase/supabase-js';
import { useRuntimeConfig } from '#imports';

let supabaseAdminClient;

export function getSupabaseAdminClient() {
  if (!supabaseAdminClient) {
    const config = useRuntimeConfig();
    if (!config.public.supabaseUrl || !config.supabaseServiceRoleKey) {
      throw new Error('Missing Supabase URL or Service Role Key in runtimeConfig for admin client.');
    }
    // Usa la SERVICE_ROLE_KEY per operazioni lato server con piÃ¹ permessi
    supabaseAdminClient = createClient(config.public.supabaseUrl, config.supabaseServiceRoleKey, {
      auth: {
        persistSession: false, // Non persistere la sessione per un client server-side
      },
    });
  }
  return supabaseAdminClient;
}

